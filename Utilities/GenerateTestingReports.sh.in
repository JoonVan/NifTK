#!/bin/bash

#/*============================================================================
#
#  NifTK: A software platform for medical image computing.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

SOURCE_DIR=@CMAKE_SOURCE_DIR@
BINARY_DIR=@EXECUTABLE_OUTPUT_PATH@
DOXYGEN_INPUT_DIR=@CMAKE_SOURCE_DIR@/Doc/TechnicalManual-ISO
DOXYGEN_OUTPUT_DIR=@CMAKE_BINARY_DIR@/Doxygen/TestingReports/
SUMMARY_FILE=@CMAKE_BINARY_DIR@/Doxygen/TestingReports/TestingReports.dox
TEST_OUTPUT=@CMAKE_BINARY_DIR@/Testing/Temporary/LastTest.log
COPYRIGHT_TEXT="@NIFTK_COPYRIGHT@"
PLATFORM_TEXT="@NIFTK_PLATFORM@, @NIFTK_VERSION_STRING@ - @NIFTK_REVISION_SHORTID@"
WARNING_GENERATED="<b>(Note: This page is automatically generated. Please do not attempt to edit it!)</b>"
GIT_HASH="@NIFTK_REVISION_SHORTID@"

echo "Generating Doxygen for Testing Reports"
echo "  git=${GIT_HASH}"
echo "  soure=${SOURCE_DIR}"
echo "  binary=${BINARY_DIR}"
echo "  copyright filter=${COPYRIGHT_TEXT}"
echo "  platform_filter=${PLATFORM_TEXT}"
echo "  doxygen input=${DOXYGEN_INPUT_DIR}"
echo "  doxygen output=${DOXYGEN_OUTPUT_DIR}"

if [ ! -d ${DOXYGEN_OUTPUT_DIR} ]; then
  mkdir -p ${DOXYGEN_OUTPUT_DIR}
fi

echo "/**" > ${SUMMARY_FILE}
echo "" >> ${SUMMARY_FILE}
echo "\page TestingReportsGenerated Testing Reports" >> ${SUMMARY_FILE}
echo "" >> ${SUMMARY_FILE}
echo "${WARNING_GENERATED}" >> ${SUMMARY_FILE}
echo "" >> ${SUMMARY_FILE}
echo "" >> ${SUMMARY_FILE}
echo "This page is generated by running specific unit tests, and it confirms that tests are associated with functional requirements." >> ${SUMMARY_FILE}
echo "<table>" >> ${SUMMARY_FILE}
echo "<tr><th>Requirement ID</th><th>Description</th><th>Status</th></tr>" >> ${SUMMARY_FILE}

# For all command line args.
for f in $*
do
  grep REQ- ${DOXYGEN_INPUT_DIR}/$f | grep -v "Project Number" > /tmp/GenerateTestingReports-${f}-REQ.txt

  cat /tmp/GenerateTestingReports-${f}-REQ.txt | while read line
  do
    REQ=`echo ${line} | cut -f 1 -d ":"`
    DESCR=`echo ${line} | cut -f 2-1000 -d ":"`

    # If test output exists from previous test, delete it to avoid associating with the wrong test ID.
    if [ -f ${TEST_OUTPUT} ]; then
      rm ${TEST_OUTPUT}
    fi

    # Run test and collect pass/fail status
    ctest -R ${REQ} --output-log /tmp/GenerateTestingReports-${f}-${REQ}.txt
    STATUS=`cat /tmp/GenerateTestingReports-${f}-${REQ}.txt | grep "Test #" | cut -f "2" -d ":"`

    # Generate a doxygen compatible page header
    echo "/**" > /tmp/doxygen.header.txt
    echo "" >> /tmp/doxygen.header.txt
    echo "\page ${REQ} ${REQ}" >> /tmp/doxygen.header.txt
    echo "${WARNING_GENERATED}" >> /tmp/doxygen.header.txt
    echo "\verbatim" >> /tmp/doxygen.header.txt

    # Generate a doxygen compatible page footer
    echo "\endverbatim" > /tmp/doxygen.footer.txt
    echo "*/" >> /tmp/doxygen.footer.txt

    # If test was not actually run, generate some dummy status.
    if [ ! -f ${TEST_OUTPUT} ]; then
      STATUS="No test output"
    fi

    # Stick it all together.
    cat /tmp/doxygen.header.txt ${BINARY_DIR}/../Testing/Temporary/LastTest.log /tmp/doxygen.footer.txt > ${DOXYGEN_OUTPUT_DIR}/${REQ}.dox

    # Generate links in summary file
    echo "<tr><td>\subpage ${REQ}</td><td>${DESCR}</td><td>${STATUS}</td></tr>" >> ${SUMMARY_FILE}

  done
done

echo "</table>" >> ${SUMMARY_FILE}
echo "" >> ${SUMMARY_FILE}
echo "*/" >> ${SUMMARY_FILE}
rm /tmp/doxygen.*
rm /tmp/GenerateTestingReports*
