/**

\page CTKWidgetsIntro Introduction To Widgets

\ref CTKWidgetsIntroduction

\ref CTKWidgetsDescription

\ref CTKWidgetsOurCommonWidgets

\section CTKWidgetsIntroduction Introduction

Any Qt Graphical User Interface (GUI) will at some point need to design and implement additional Qt widgets. 
It is imperative that these are designed and unit tested properly. However, this can be difficult to achieve in practice.
The following recommendations apply in order of preference:

<ol>
<li>Study the <a href="http://www.commontk.org">CTK</a> widgets and directly contribute to CTK.</li>
<li>Write a Qt widget, using CTK as inspiration, but keep it in NifTK/Code/Libs/Qt.</li>
</ol>

These are described below.

\section CTKWidgetsDescription Developing CTK Widgets

The <a href="http://www.commontk.org">Common Toolkit</a> provides a widget library for medical image
applications. These widgets were developed for the <a href="http://www.slicer.org">Slicer 4</a>
project during the port from KW Widgets (based on Tcl/Tk) to Qt. In addition, the Slicer team
developed a Qt widget testing framework to extensively unit test widgets. 

Take a look in the <a href="link">CTK Source tree</a> at Libs/Widgets. New widgets should be developed according to:

<ul>
<li>File prefix is "ctk"</li>
<li>File suffix is .h or .cpp</li>
<li>Strictly adopt Qt <a href="link">coding conventions</a></li>
<li>Make full use of Qt macros such as Q_OBJECT, Q_ENUMS, Q_PROPERTY for every property</li>
<li>Use QT_SIGNALS: macro instead of declaring "public signals" to give compatibility with Boost signals</li>
<li>Place Icons and UI files under the Resources folder</li>
<li>Unit tests must be developed, and placed under the Libs/Widgets/Testing directory</li>
<li>Designer plugins for each widget must be developed, and placed under the Libs/Widgets/Plugins</li> 
</ul>

All this is fairly obvious if you start with the assumption that you definitely will be contributing the 
widget back to the CTK library. In order to contribute, you should

<ul>
<li>Join the CTK mailing list</li>
<li>Fork CTK on github</li>
<li>Add each new widget in a new branch</li>
<li>Send a pull request to the CTK team for each widget</li>
<li>When the CTK widget is fully tested, documented and merged into CTK, update the NifTK/CMake/CMakeExternals/CTK.cmake to get the new CTK version.
</ul>

However, in practice this may mean that new widgets are added to a new version of CTK that is incompatible with MITK.
In general the MITK developers try and keep the latest version of MITK compatible with the latest version of CTK, but 
if we add widgets directly to CTK, it may require some careful planning, and collaboration with MITK and CTK.

\section CTKWidgetsOurCommonWidgets Developing NifTK Widgets

There is a set of widgets in NifTK/Code/Ext/Qt.  These are currently not unit tested, do not use
Qt properties very well, but for the first version of NiftyView, they were relatively simple
and so, they were simply used, as is. Widgets can be added to this folder. Where possible try
to adhere to as many of the CTK practices as possible. Use the CTK widgets as a reference standard.


*/
