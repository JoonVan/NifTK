/**

\page ArchitectureMIDASMorphEditor Architecture - MIDAS Morphological Editor

\li \ref ArchitectureMIDASMorphEditorIntro
\li \ref ArchitectureMIDASMorphEditorDescription
\li \ref ArchitectureMIDASMorphEditorPipeline
\li \ref ArchitectureMIDASMorphEditorEdits
\li \ref ArchitectureMIDASMorphEditorConclusion

\section ArchitectureMIDASMorphEditorIntro Introduction

The <a href="http://www.sciencedirect.com/science/article/pii/S0169260797018038">MIDAS Morphological editor</a>
has been implemented within NiftyView using

\li An MITK plugin:
\verbatim
NifTK/Code/Gui/MITK/Plugins/uk.ac.ucl.cmic/midasmorphologicalsegmentor
\endverbatim
\li Qt widgets, signals and slots.
\li An abstract interface defining an ITK pipeline.
\li ITK classes in: 
\verbatim
NifTK/Code/Libs/ITK/Segmentation
\endverbatim
\li Unit tests for ITK classes in:
\verbatim
NifTK/Testing/Code/Libs/ITK/Segmentation
\endverbatim

\section ArchitectureMIDASMorphEditorDescription Class Overview

Figure 1 shows the class overview, and Figure 2 shows the initial view of the MIDAS Morphological Editor plugin.

\image html ArchitectureMIDASMorphEditor.png "Figure 1. An overview of the main classes involved in the construction of the MIDAS Morphological Editor plugin."

\image html ArchitectureMIDASMorphEditorTab1.png "Figure 2. The initial tab, showin the 4 stages of the process as a QTabbedWidget, the image selector and tool selector."

The MIDAS Morphological Editor is provided as an MITK plugin called MIDASMorphologicalSegmentorView derived 
from QAbstractView. The niftkMIDASBaseSegmentationFunctionality contains 
niftkMIDASImageAndSegmentationSelectorWidget providing the image selector and new segmentation button at 
the top of the plugin.  niftkMIDASBaseSegmentationFunctionality also contains an MITK QmitkToolGUIArea and 
QmitkToolSelectionBox, and QmitkToolSelectionBox creates an mitk::ToolManager. These MITK classes are part 
of the <a href="http://www.sciencedirect.com/science/article/pii/S0169260709001229">MITK Segmentation Framework</a>. 
To understand this plugin, you must read that paper.

The main GUI control is assembed in MIDASMorphologicalSegmentorView and comprises:

\li a niftkMIDASImageAndSegmentationSelectorWidget contained in niftkMIDASBaseSegmentationFunctionality
\li a niftkMIDASToolSelectorWidget contained in niftkMIDASBaseSegmentationFunctionality 
\li a MIDASMorphologicalSegmentorViewControlsImpl contained in MIDASMorphologicalSegmentorView 

in that order.  The GUI classes created in niftkMIDASBaseSegmentationFunctionality are also used 
in the MIDASGeneralSegmentorView, providing common functionality, look and feel for both plugins.

The GUI components use Qt signals and slots to call methods on MIDASMorphologicalSegmentorView.
MIDASMorphologicalSegmentorView contains a MIDASMorphologicalSegmentorPipelineManager
which itself contains a MorphologicalSegmentorPipelineInterface
which is implemented by MorphologicalSegmentorPipeline using ITK.  The whole plugin is essentially 
a Qt GUI, calling methods in MIDASMorphologicalSegmentorView which sets parameters on the ITK pipeline, 
which updates, and produces an output, which can be visualised using MITK and hence VTK as a binary image.

\section ArchitectureMIDASMorphEditorPipeline Pipeline Operation

The MIDAS Morphological Editor consists of 4 distinct phases: Thresholding, Erosions, Dilations and Rethresholding.
This workflow can be seen in Figure 3, as 4 separate tabs that operate in sequence. 

\image html ArchitectureMIDASMorphEditorTabs.png "Figure 3. The MIDAS Morphological Editor consistes of 4 stages: Thresholding, Erosions, Dilations and Rethresholding, controlled by 4 tabs."

This workflow is directly mirrored by the ITK pipeline. Figure 4 shows the the ITK classes.

\image html ArchitectureMIDASMorphEditorPipeline.png "Figure 4. The 4 stages of Thresholding, Erosions, Dilations and Rethresholding are directly mirrored in the ITK pipeline."

When the GUI is displaying the Thresholding tab, the pipeline is only updating itk::BinaryThresholdImageFilter and itk::MIDASMaskByRegionImageFilter.
When the GUI is displaying the next 3 tabs, additional filters are added to the pipeline:

\section ArchitectureMIDASMorphEditorEdits Pipeline Editing (Connection Breaker)

When the Erosions and Dilations tab are active, the user can edit the segmentation.

\li Left mouse button = add to the segmentation - i.e. paint voxels in the Erosions Additions image or the Dilations Additions image
which are added to the output in the corresponding itk::MIDASMaskByRegionImageFilter. 
\li Middle mouse button = break connections - this is highlighted in orange. This is achieved by painting voxels 
in the Erosions Edits or the Dilations Edits image, which are then used to subtract voxels out of the output of 
the corresponding itk::MIDASMaskByRegionImageFilter. 
\li Right mouse buttons = remove from the orange region used for connection breaking. This is achieved by painting voxels
in the Erosions Edits or Dilations Edits image with a zero value, thereby erasing them. In effect this is an undo 
operation for the middle mouse button, leading to connections being un-broken.

The editing is implemented using the 
<a href="http://www.sciencedirect.com/science/article/pii/S0169260709001229">MITK Segmentation Framework</a>. 
The mitk::ToolManager can manage a number of tools that can be used to edit segmentations. In the case of the 
MIDAS Morphological Editor, the mitk::ToolManager registers 4 working data images, these are the Additions 
image and the Edits image for both Erosions and Dilations. This is slightly different to how the framework normally operates. 
The framework normally operates with a single working data, and the output image that the user is interested in is that 
single working data. In our case, the working data are 4 intermediate image that are used to influence the output of the 
ITK pipeline. 

Furthermore, the <a href="http://docs.mitk.org/nightly-qt4/InteractionPage.html">MITK undo/redo framework</a> 
is used so that the niftk::MIDASPaintbrushTool can undo and redo the edits.

\section ArchitectureMIDASMorphEditorConclusion Conclusion

The MIDAS Morphological Editor is re-implemented as a Qt GUI calling an ITK pipeline, delivered within an MITK plugin.
Future researchers can easily add filters to the pipeline, easily add unit tests for these filters, and easily 
provide additional editing tools to provide more complex editing functionality as desired. The plugin is not designed
to be infinitely extensible as by design it is for a very specific task.

*/