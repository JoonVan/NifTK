/**

\page BuildInstructions The Build Instructions

\section BuildInstructionsDeveloper Are you Really a NifTK developer?

If you just want to use NifTK, and don't plan on extending it, and don't need up to the minute code changes, 
then please enquire on the <a href="@NIFTK_USER_CONTACT@">users mailing list</a> for the
whereabouts of binary packages. If you are keen to build your own, then read on.

\section BuildInstructionsSuperBuild Building Using The SuperBuild Process

As of Trac #908, there is a single ''Super Build'' option to build NifTK and all 
dependencies using CMake. This should work identically on Linux, Windows and Mac, 
and considerably simplifies the build process. The steps are summarised below, with
screenshots from a Mac.  On Windows and Linux, the process is almost identical. 
Most of the dependencies (Boost, VTK, ITK etc.) are automatically downloaded 
from 
\verbatim
http://cmic.cs.ucl.ac.uk/platform/dependencies
\endverbatim
 
which can be accessed on the CMIC Unix filesystem here:

\verbatim
/cs/sys/www0/marine/html/cmic.cs.ucl.ac.uk/platform/dependencies
\endverbatim

\section BuildInstructionsBeforeStarted 1. Before You Get Started - Known Caveats

People should add any preconditions or caveats here as they find them.

<ul>
<li> On Ubuntu you will need to install libncurses-dev, libxt-dev, libtiff4-dev and libwrap0-dev. (This has been done on hellica and denguefever).</li>
<li> On most Linux distros you will need to install libbz2-dev.</li>
<li> On CMIC Centos machines, you will need to use CMAKE_C++_COMPILER=/usr/lib/g++44 and CMAKE_C_COMPILER=/usr/lib/gcc44 in the build below. </li>
<li> On CMIC Scientific Linux machines, the compiler version is more up to date, as is Qt. 
So if you are currently running a CMIC Centos machine, you are strongly advised to upgrade your 
machine to the latest Scientific Linux. Email request@cs.ucl.ac.uk and ask for the new Scientific Linux build. </li>
<li> On Windows please "tidy up" your system before attempting to build NifTK. If you happen to have multiple old versions of Qt, Boost, Dcmtk etc. scattered all around the disk it is very likely that CMake might pick up one, and your build will fail in a spectacular fashion.
Do check your system path, if it has Boost, old Qt, random installation of ITK or VTK then please clear them off. </li>
<li> If you would like to compile NifTK using Visual Studio 2010 or VS2012 please also install the VS Redistributable packages for your system. Also make sure that you have at least the "Professional" version of Visual Studio, otherwise you won't have OpenMP support.

<br> 32 bit Windows:
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=3387">Microsoft Visual C++ 2005 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=5638">Microsoft Visual C++ 2005 SP1 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=29">Microsoft Visual C++ 2008 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=5582">Microsoft Visual C++ 2008 SP1 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=5555">Microsoft Visual C++ 2010 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=8328">Microsoft Visual C++ 2010 SP1 Redistributable Package (x86)</a><br>

<br> 64 bit Windows:
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=21254">Microsoft Visual C++ 2005 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=18471">Microsoft Visual C++ 2005 SP1 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=15336">Microsoft Visual C++ 2008 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=2092">Microsoft Visual C++ 2008 SP1 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=14632">Microsoft Visual C++ 2010 Redistributable Package (x86)</a><br>
<a href="http://www.microsoft.com/en-us/download/details.aspx?id=13523">Microsoft Visual C++ 2010 SP1 Redistributable Package (x86)</a><br>

</li>
</ul>

\section BuildInstructionsDownloadCMake 2. Install CMake

Caveat: CMake is very difficult to work with, requiring specific versions on each platform.

You can build CMake from source or download the pre-compiled binaries for your platform (64bit / 32bit):<br> 
\verbatim
http://www.cmake.org/files/v2.8/
\endverbatim

<ul>
<li> On Windows you must use CMake 2.8.11.2.</li>
<li> On Mac Mountain Lion (10.8) machines you must use CMake 2.8.9. </li>
<li> On Mac Mavericks (10.9) machines you must use CMake 2.8.12.1. </li>
<li> On Linux machines you must use CMake 2.8.9. </li>
</ul>

Once you have obtained a binary version of CMake or built your own CMake, please install it to a convenient location and make sure to add the bin folder to your system path (e.g. "c:\Program Files\CMake_2.8.11.2\bin\" or "/opt/cmake-2.8.12.1/bin").
If you have built your own CMake on Linux or Mac, make sure that you have built the 'ccmake' command and it is visible on your PATH.

\section BuildInstructionsDownloadQt 3. Install Qt 4.8.6 

Note: Qt series 5 is not supported. You should use the latest Qt series 4.

<ul>
<li> If you intend to simply build and develop you can install a pre-compiled Qt version. 
Go to <a href="http://qt-project.org/downloads">here</a>, selecting the full SDK and the 
LGPL open-source version.  It is essential, that once installed the program qmake is available 
on the command line, and the correct version. i.e. run qmake --version on the command line. </li>
<li> If you want to make standalone binary packages for distribution you must download 
the source code and compile your own, and install it in a non standard place (i.e. not /usr/bin, /usr/lib), 
then make sure it really is the version you are using. i.e. run qmake --version on the command line. 
On Linux/Mac try
\verbatim
./configure -prefix /somewhere/to/install/qt-4.8.6 -release -shared -script -openssl -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -nomake examples -nomake demos 
\endverbatim
</li>

<li> On Mac Mavericks you have to build the latest sources from their git repositiory and build it with the Mountain Lion (10.8) system libraries.
<br>
\verbatim
git clone git://gitorious.org/qt/qt.git qt
cd qt
./configure -prefix /somewhere/to/install/qt-4.8.6 -sysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -release -shared -script -openssl -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -nomake examples -nomake demos 
\endverbatim
</li>

<li> On Windows follow the instructions below to build Qt:<br>

First of all, on Windows only the Visual Studio builds are currently supported (no mingw or msys), so you'll need to have Microsoft Visual Studio installed (2010 or 2012 Professional (or better) version is recommended). Note that if you use Microsoft Visual Studio 2010, you must have its Service Pack 1 installed to avoid major build issues, similarly for Visual Studio 2012 please install Update4.<br>
You might also want to have the Qt intergation pack installed for VS: <a href="http://qt-project.org/downloads#qt-other">Qt VS Integration</a>

On Win32 you can download a pre-compiled Qt version from <a href="http://qt-project.org/downloads">_here_</a>. The suitable versions are:
- Qt libraries 4.X.X for Windows (VS 2008, 234 MB) or 
- Qt libraries 4.X.X for Windows (VS 2010, 235 MB) <br>
where XXXX is the Visual Studio version you'd like to use.

On 64bit Windows (or if you are an adventurous Win32 user) you have to build Qt from source. 

The first step is to obtain the source: The latest source code is available <a href="http://qt-project.org/downloads#qt-lib">here</a> as a zip (261 MB) or a tar.gz (223 MB). Or clone Qt from the git repository: git clone git://gitorious.org/qt/qt.git.<br><br>
Uncompress the files into a build directory of your choice (e. g. "C:\Qt\4.8.6-build"), and create a directory where you want Qt installed (e.g. "C:\Qt\4.8.6"). <br>Note: The install path must not contain any spaces or Windows specific file system characters.<br>

To configure Qt a Windows version of Perl will be required. Get the installer from here: <a href="http://strawberryperl.com/">StrawberryPerl</a>. Install the package and make sure that the "bin" folders of Perl are added to your system path.<br>

On Windows you'll have to install OpenSSL before attempting to build Qt (OpenSSL is required for the XNAT functionality). Please download the installer from here: <a href="http://slproweb.com/products/Win32OpenSSL.html">Win OpenSSL</a>. Install the package somewhere, but make sure that the install path must not contain any spaces or Windows specific file system characters (e.g. c:\OpenSSL-Win64\).<br><br>

If you need symbols (to be able to debug a crashed release-build, for example, or to performance-profile your code), you'll need to hack mkspec: You need to edit
\verbatim
qtsrc/mkspecs/win32-msvc2010/qmake.conf
\endverbatim
Add to QMAKE_CFLAGS_RELEASE the -Zi flag, and to QMAKE_LFLAGS_RELEASE the /debug flag. For example:
\verbatim
...
QMAKE_CFLAGS_RELEASE = -O2 -MD -Zi
...
QMAKE_LFLAGS_RELEASE = /INCREMENTAL:NO /DEBUG /OPT:REF
...
\endverbatim<br>

The current version of Qt (4.8.6 - from git repo) doesn't build with VS2012 due to header file within the "webkit" module. To fix this issue please replace
\verbatim
qt-src-folder\src\3rdparty\webkit\Source\JavaScriptCore\wtf\HashSet.h
\endverbatim<br>
with the HashSet.h file that is provided <a href="file://HashSet.h">here</a></br>

The compilation is done from the Visual Studio command prompt. On 64bit Windows make sure that you use the "Visual Studio x64 Win64 Command Prompt"!

To open the command prompt launch:
- 32bit: Start->All Programs->Microsoft Visual Studio XXXX->Visual Studio Tools->Visual Studio Command Prompt
- 64bit: Start->All Programs->Microsoft Visual Studio XXXX->Visual Studio Tools->Visual Studio x64 Win64 (Native) Command Prompt <br>
where XXXX is the Visual Studio version you'd like to use.

The next step is to configure Qt for the build:
\verbatim
cd /D C:\Qt\4.8.6-build
configure -no-dbus -no-phonon -no-phonon-backend -no-accessibility -no-multimedia -no-audio-backend -no-sql-mysql -no-sql-psql -no-sql-oci -no-sql-odbc -no-sql-tds -no-sql-db2 -no-sql-sqlite2 -no-sql-ibase -no-qt3support -nomake examples -nomake tests -debug-and-release -shared -mp -script -openssl -opensource -confirm-license -platform win32-msvc2012 -prefix c:\Qt\4.8.6 -I c:\OpenSSL-Win64\include -L c:\OpenSSL-Win64\lib
\endverbatim

The last four parameters have to be adjusted. Set "-platform win32-msvcXXXX" to match the desired Visual Studio version (e.g. -platform win32-msvc2010 or -platform win32-msvc2012). Note when you use x64 command prompt Qt is compiled to x64, despite the "win32" parameter setting.<br><br>

Also, you'll need to specify the installation prefix to specify where to install Qt (e.g. "c:\Qt\4.8.6").<br> 

The -I and -L parameters are to specify additional include paths and library paths, respectively. Please edit these to point to your installation of OpenSSL, so qmake can find them.<br>

<br><br>If you later need to reconfigure and rebuild Qt from the same location, ensure that all traces of the previous configuration are removed by entering the build directory and typing "nmake distclean" before running configure again.<br>

The next step is to compile and build Qt, so type:
\verbatim
nmake
\endverbatim 

The build process can easily take more an hour. After it's finished type:
\verbatim
nmake install
nmake clean
\endverbatim 

This will remove all the temporary files used during build-time. 

The last step is to add the bin directory to your system path. For newer versions of Windows, PATH can be extended through the Control Panel|System|Advanced|Environment variables menu. Look for 'PATH' and add "c:\Qt\4.8.6\bin;" to the FRONT of the path string.
You'll have to log off / log on for the changes to make effect.
</li>

</ul>

\section BuildInstructionsVersioning 4. Version Control

You must also have an up to date svn client, and git client.

<ul>
<li> On Windows, you'll need <a href="http://www.sliksvn.com/en/download">SlikSVN</a> and <a href="http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git">Git for Windows</a>.<br>
These are the essential command line tools. After their installation please make sure that both svn and git are added to your system path. 

If you require an additional graphical interface please install <a href="http://tortoisesvn.tigris.org">TortoiseSVN</a> and <a href="http://code.google.com/p/tortoisegit">TortoiseGIT</a>. <br>

</li>
<li> On Linux these are widely available, and probably up to date enough, EXCEPT git at the DRC. At the DRC use 
\verbatim
/var/drc/software/32bit/git
\endverbatim
<li> On Mac, available if you installed the XCode tools.</li>

<br>
Please do remember to configure your git and svn before attempting to build NifTK!!! For svn to work correctly all you need to do is to check out something from cmicdev, and accept the certificate permanently. For git, please follow the <a href="https://cmicdev.cs.ucl.ac.uk/trac/wiki/Git%20at%20CMIC">Git Instructions</a>. 

</ul>

\section BuildInstructionsDoxygen 5. Doxygen
<li> 
In order to compile the documentation you'll need to have Doxygen installed. Please download Doxygen for you platform from <a href="ftp://ftp.stack.nl/pub/users/dimitri/">_this_</a> site (via ftp).<br><br>
Please note that there are issues with the latest versions, so make sure you install a version no newer than 1.8.0!

</li>

\section BuildInstructionsNSIS 5.5 NSIS - Windows Only!
<li> 
If you would like to have an "official" NifTK installation (that appears under Programs, can be uninstalled, have icons and shortcuts and so on) you'll have to create an installer. 
On Windows we use NSIS for this task, which can be downloaded from <a href="http://nsis.sourceforge.net/Download">_here_</a>.<br><br>
Please install NSIS and make sure that it is added to your system path. For further instructions about the installation please refer to Section 10.
</li>

\section BuildInstructionsDownload 6. Download the code

\verbatim
git clone https://cmiclab.cs.ucl.ac.uk/CMIC/NifTK.git
\endverbatim

\section BuildInstructionsCMake 7. CMake

<ol>
<li> Using CMake, select the source and a different build directory

\image html niftk-build-snapshot1.png "Figure 1. Select the source folder, and a different build folder."

</li>
<li> Press configure. </li>
<li> Select the right type of generated files. On Linux/Mac, you chose Makefiles, 
on Windows you choose the version of Visual Studio

\image html niftk-build-snapshot2.png "Figure 2. Select the correct generator."
</li>
<li> Set the CMAKE_BUILD_TYPE. Type either Debug or Release. </li>
<li> Set the CMAKE_INSTALL_PREFIX.  You must specify the full directory, including the 
package name such as @NIFTK_DEPLOY_NAME@. For development environments, it doesn't really 
matter what you call it, so it could be /Users/mattclarkson/install/foo-version-bar and 
subdirectories will be created below foo-version-bar. For release builds, the version number 
to use can be found in the top of the CMakeLists.txt file, but the core development team will 
know this anyway.
</li>
<li>On Mac Mavericks (10.9) you need to set the following CMake variables:
  <ul>
    <li>CMAKE_OSX_SYSROOT: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk"</li>
    <li>CMAKE_OSX_DEPLOYMENT_TARGET: "10.8"</li>
    <li>CMAKE_OSX_ARCHITECTURES: "x86_64"</li>
  </ul>
  You can pass these options to the cmake or ccmake commands in the command line like this:
  <verbatim>
    ccmake -DCMAKE_OSX_SYSROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.8" -DCMAKE_OSX_ARCHITECTURES="x86_64" ../niftk-source-dir
  </verbatim>
</li>
<li> Select which options you want building. These variables start with BUILD_

\image html niftk-build-snapshot3.png "Figure 3. Select the build options."

</li>
<li> Press configure repeatedly, setting variables as appropriate until the generate option is available. 
The most important variable is whether you want BUILD_GUI (for NiftyView) to be ON or OFF.
</li>
<li> Press the generate button to generate the make files. </li>

\section BuildInstructionsUnix 8. Building (Unix)

At the command prompt, in the build directory
\verbatim
make
\endverbatim
will perform an initial build of all the external dependencies, and also NifTK. 
Then the repeated cycle of code, compile, test should be done within the subdirectory called NifTK-build.
\verbatim
cd NifTK-build
make
ctest -R <whatever>
etc.
\endverbatim

\section BuildInstructionsWindows 9. Building (Windows)

Open the Visual Studio .sln file in the build directory (NifTK-SuperBuildRelease in this example), 
and execute the BUILD task. Note that Visual Studio defaults to a Debug build, so if you wish to build a Release version you'll have to manually change the build configuration to Release, regardless what was set in CMake. Once successfully completed, exit Visual Studio.

The repeated cycle of code, compile, test should be done within the subdirectory 
called NifTK-build, where you should use the batch file startNiftyView_Debug.bat or startNiftyView_Release.bat
to launch Visual Studio, and the BUILD task. Please ALWAYS use these bat files to start VS! NiftyView can be run directly within Visual Studio by setting it as the startup project.

\section BuildInstructionsInstall 10. Installing (Unix, Windows)

A developer can run all the applications from the build directory. Indeed, the test-code-compile-test cycle 
will mean that the developer is constantly running the compiled output, either through a development environment
such as Eclipse, Qt Creator, or Visual Studio or via the command line. However, the developer may also wish to 
install the code to some installation folder for safe keeping. During the initial configuration, the CMAKE_INSTALL_PREFIX
is set to be the installation folder. The software can be "installed" by typing

\verbatim
make install
\endverbatim

for Linux/Mac.

On Windows, you can run the INSTALL task of the NifTK project (not the Superbuild) in Visual Studio, which will copy the files to the destination directory (defined by CMAKE_INSTALL_PREFIX). Please double check if you have write permissions to the installation folder! <br>

If you have NSIS installed (and added to the system path!!) you can run the PACKAGE task of the NifTK project (not the Superbuild) in Visual Studio.
This task will run CPack on NifTK, which will generate an NSIS script, which will get eventually processed by NSIS to generate an executable NifTK installer bundle.
This executable will be placed within the NifTK-build subfolder, once the PACKAGE task finished you can run it to install NifTK onto your system (will appear in Start Menu, can be uninstalled, etc).
 
\section BuildInstructionsTroubleShooting 11. Trouble shooting

<ul>
<li> On Windows, If you get errors when running CMake related to 'git', ensure that the CMake variable GIT_EXECUTABLE is correctly set. </li>
<li> On Windows, we only recommend and regularly test Windows 64 bit. While the build is known to work on 32bit Windows 7 and XP, it is less frequently tested. </li>
<li> On Windows, sometimes building the dependencies can be tricky. Open the Visual Studio project file at the Superbuild level, and build the CLEAN, Boost, GDCM, VTK, ITK, CTK, MITK one at a time, in that order. </li>
<li> On Windows, the multi-threaded Visual Studio builds are found to be unreliable. Sometimes the build of VTK or ITK are failing randomly, which libraries has been reliably built hundreds of times. <br><br>
If you are experiencing "unpredicatble" problems with your VS build please turn off the multi-threaded build feature.<br>
Go to Tools > Options > Projects and Solutions > Build and Run, and set the "Maximum number of parallel project builds" variable to 1.
</ul>

\section BuildInstructionsFinalInstallation 12. Final Installation 

In addition, there are some additional steps, that could be considered as optional.
When an end-user downloads compiled binaries, there are some steps to enable the use
of some scripts and command line programs. These can be found on the 
<a href="@NIFTK_INSTALL_INSTRUCTIONS@">installation instructions</a> page.
A developer can either install their software as described in section 10, and then
adapt these <a href="@NIFTK_INSTALL_INSTRUCTIONS@">installation instructions</a>
to run the command line scripts from their installation folder, or they can adapt
the <a href="@NIFTK_INSTALL_INSTRUCTIONS@">installation instructions</a> to run
scripts from the build folder.
 
*/

