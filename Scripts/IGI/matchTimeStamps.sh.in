#!/bin/bash

#/*============================================================================
#
#  NifTK: A software platform for medical image computing.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

source _niftkCommon.sh

# Note: The automatic doxygen generator uses the first two lines of the usage message.

function Usage()
{
cat <<EOF
Scan time stamped files in 1st directory and find best match in 2nd directory
Outputs timing errors and creates symbolic links to matched files
Usage: matchTimeStamps.bash directory1 directory2 suffix timingLag maxTimingError
EOF
exit 127
}

# Check args

check_for_help_arg "$*"
if [ $# -eq 1 ]; then
  Usage
fi
dir1=$1
dir2=$2
if [ $# -lt 3 ]
then
	suffix=".txt"
else
	suffix=$3
fi
if [ $# -lt 4 ]
then
	timingLag=0
else
	timingLag=$4
fi

if [ $# -lt 5 ]
then
	maxTimingError=9999999999999999999
else
	maxTimingError=$5
fi


echo $suffix $timingLag

if [ -z "${dir1}" ]; then
  Usage
fi

if [ -z "${dir2}" ]; then
  Usage
fi

timesIn=$(ls $dir1/???????????????????${suffix} | grep -c $)
matchTimes=$(ls "$dir2" | grep -c $)

echo There are $timesIn files in dir 1 and $matchTimes in dir 2

timesIn=$(ls $dir1/???????????????????${suffix} | tr -s '/' | sort -g )
matchTimes=$(ls "$dir2" | sort -g )

for time in $timesIn
do
	t1=${time%${suffix}*}
	t1=${t1##*/}
	if [ ! -e $dir1/$t1.match ]
	then
		echo -n best match for $t1 is ...
		bestDelta=$t1
		bestMatch=0
		shortMatches=$matchTimes
		listsize=$(echo $matchTimes | wc | tr -s ' ' | cut -f 3 -d ' ')
		echo -n "Searching " $listsize "matches ..."
		for match in $matchTimes
		do
				t2=${match%.*}
				delta=$(echo "sqrt(($t1-$t2 - $timingLag)^2)" | bc)
				if [ $delta -lt $bestDelta ]
				then
					bestMatch=$t2
					bestMatchName=$match
					bestDelta=$delta

					listsize=$(echo $shortMatches | wc | tr -s ' ' | cut -f 3 -d ' ')
					if [ $listsize -gt 1 ]
					then
						#we've found the best match, and as the lists are sorted there's
						#no point searching through searched matches.
						shortMatches=${shortMatches/$match}
					fi
				fi
				if [ $delta -gt $bestDelta ]
				then
					#But we need to keep the last match so the previous if works
					shortMatches="${bestMatchName} ${shortMatches}"
					break
				fi
		done
		matchTimes=${shortMatches}
		listsize=$(echo $matchTimes | wc | tr -s ' ' | cut -f 3 -d ' ')
		errorOK=$(echo "$bestDelta - $maxTimingError < 0 " | bc)
		if [ $errorOK -eq 1 ]
		then
			echo $bestMatch with delta = $bestDelta

			here=$(pwd)
			cd $dir1
		 		ln -s -f "${here}/${dir2}/${bestMatch}.txt" $t1.match
			cd $here
		else
			echo no match due to excessive timing error = $bestDelta
		fi
	else
		echo $t1 is already matched
	fi

done

