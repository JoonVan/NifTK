#!/bin/bash

#/*============================================================================
#
#  NifTK: A software platform for medical image computing.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

SUBJECTS_DIR=`pwd`

source _fsInclude.sh

# Note: The automatic doxygen generator uses the first two lines of the usage message.

function Usage()
{
cat <<EOF

This script will import ventricles into an already existing FreeSurfer directory structure.

Usage: fsImportVentricles.sh dataFile [ options ]
 
Mandatory Arguments:

  dataFile      : A file containing your patient names and details, like this:
 
                  Patient   VentricleMask   Image  
                  ALLHA     Man_1684973420  02979-002-1.img
                  ALLFR     Man_1084266669  03929-002-1.img
                  
                  The first line is just text, and hence skipped.
                  
                  After that, you can use absolute or relative pathnames, using full filenames (including extension like .img).
                  
Options:


  -b beginRow   : is the start row in the dataFile.
  -e endRow     : is the end row in the dataFile.
                                    
  -s directory  : is the scans directory [ default is <current_dir>/scans ]
  -v directory  : is the vents directory [ default is <current_dir>/vents ]

  -d int        : Number of dilations to perform in mask. Default 0.
                                   
EOF
exit 127
}

function import_files()
{
    local do_import=$1
    local start_line=$2
    local finish_line=$3
    
    i=$start_line
        
	while [ "$i" -le "$finish_line" ]
	do

	  patient=`awk 'NR-1 == '$i' {print $1}' $fichier`
	  vents=`awk 'NR-1 == '$i' {print $2}' $fichier`
	  image=`awk 'NR-1 == '$i' {print $3}' $fichier`
      
      if [ "_$patient" = "_" -a "_$vents" = "_" -a "_$image" = "_" ]; then
        echo "Skipping blank line"
      else
        #echo "Read: $patient, $vents, $image"

        if [ "$vents" != "" ] ; then
          check_file_exists ${vents_dir}/$vents
        fi

        if [ "$image" != "" ] ; then
          check_file_exists ${scans_dir}/$image
        fi
        
        if [ ! -d ${SUBJECTS_DIR}/${patient} ]; then
          exitprog "Patient directory ${SUBJECTS_DIR}/${patient} does not exist, did you set SUBJECTS_DIR correctly?" 1
        fi

        if [ ! -d ${SUBJECTS_DIR}/${patient}/mri ]; then
          exitprog "FreeSurfer mri directory ${SUBJECTS_DIR}/${patient}/mri does not exist, are you sure ${patient} is a FreeSurfer directory" 1
        fi
        
        if [ "$do_import" = "IMPORT" ]; then
        
            cwd=`pwd`
            execute_command_or_else_stop "makemask  $scans_dir/$image $vents_dir/$vents $SUBJECTS_DIR/${patient}/mri/mask -bpp 16 -d $dilations"
            execute_command_or_else_stop "cd $SUBJECTS_DIR/${patient}/mri/"
            execute_command_or_else_stop "anchange mask.img fmask.img -flipy"
            execute_command_or_else_stop "medcon -f fmask.hdr -c anlz"
            execute_command_or_else_stop "mri_convert  --conform -rt nearest m000-fmask.img vents.mgz"
            execute_command_or_else_stop "\rm mask.img fmask.img m000-fmask.img"
            execute_command_or_else_stop "\rm mask.hdr fmask.hdr m000-fmask.hdr"
            execute_command_or_else_stop "\rm mask.log"
            execute_command_or_else_stop "cd ${cwd}"
			                  
        fi
      fi
      	    	
	  # Increment loop counter
	  i=$(($i+1))
	done

}

# Check args

check_for_help_arg "$*"
if [ $? -eq 1 ]; then
  Usage
fi

if [ $# -lt 1 ]; then
  Usage
fi

# Get the filename, and check it exists.
filename=$1
shift

# Subjects_list holds info about subjects.  the n-1 calculates how many there are, -1 because of header line.
fichier=$filename
check_file_exists $fichier

n=`wc -l $fichier | sed -n 's/^\(.*\) .*/\1/p'`
n=$(($n-1))

# Set defaults
start_line=1
finish_line=$n
scans_dir=$SUBJECTS_DIR/scans
vents_dir=$SUBJECTS_DIR/vents
dilations=0

while [ "_$1" != "_" ] ; do
    if [ "$1" = "-b" ] ; then
        start_line=$2
        shift 2
    elif [ "$1" = "-e" ] ; then
        finish_line=$2
        shift 2
    elif [ "$1" = "-s" ] ; then
        scans_dir=$2
        shift 2
    elif [ "$1" = "-v" ] ; then
        vents_dir=$2
        shift 2
    elif [ "$1" = "-d" ] ; then
        dilations=$2
        shift 2                            
    else
        Usage
    fi
done

echo "Using file $fichier and starting at $start_line, and finishing at $finish_line"
echo "  scans:$scans_dir"
echo "  vents:$vents_dir"
echo "  dilations:$dilations"

# First check that files exist
import_files "CHECK" $start_line $finish_line $scans_dir $vents_dir

# Now really do it.
import_files "IMPORT" $start_line $finish_line $scans_dir $vents_dir
