#!/bin/bash

#/*============================================================================
#
#  NifTK: A software platform for medical image computing.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

function Usage()
{
cat <<EOF

This script is the working script which is called ComputeSymmetricBrainBSI.sh to perform symmetric brain BSI. Please use ComputeSymmetricBrainBSIBatch.sh.
  
EOF
exit 127
}

if [ $# -lt 3 ]
then 
  Usage
fi 

set -x

# Do the symmetric registration.
ComputePairwiseRegistration.sh $*

output_dir=`dirname $1`

# Get the reg input images and regions.
shift 10
reg_files="$*"

# Create the input for the transform, e.g. image1 region1 dummy dummy dof1_2.dof dof1_3.dof and so on.
field_count=`echo ${reg_files} | awk '{printf NF}'`
image_count=`echo "${field_count}/4" | bc`
image1=`echo ${reg_files} | awk '{printf $1}'`
image1_basename=`basename ${image1}`
image1_id=`echo ${image1_basename} | awk -F- '{printf $1}'`
prefix="${image1_id}_groupwise"
input_transform="${prefix} ${image_count}"
for ((i=0; i<${image_count}; i++))
do
   (( j=i\*4+1 ))
   (( k=j+1 ))
   input_transform="${input_transform} `echo ${reg_files} | awk -v j=${j} -v k=${k} '{printf $j" "$k}'` dummy dummy"
   for ((m=0; m<${image_count}; m++))
   do
     if [ ${i} != ${m} ]
     then
       input_transform="${input_transform} ${output_dir}/${image1_id}_pairwise_${i}_${m}_affine_second.dof"
     fi
   done
done

# Do the transformation and calcualte brain BSI.
asym_flag=""
interpolation="-interpolation 4"
double_window="-double_window no"
ss_atlas="-ss_atlas dummy"
just_dbc="-just_dbc no"
kernel_size="-radius 5"
dbc_method="-mode 1"
pairwise_dbc="-pairwise_dbc 0"
compute_symmetric_transform_n.sh ${asym_flag} ${interpolation} ${double_window} ${just_dbc} ${kernel_size} ${pairwise_dbc} ${dbc_method} ${ss_atlas} ${output_dir} ${input_transform}










