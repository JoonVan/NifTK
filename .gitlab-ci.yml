
stages:
  - build
  - test
  - deploy
  - cleanup

before_script:
  - export src_dir=${CI_PROJECT_DIR}
  - export git_hash=${CI_COMMIT_SHA:0:6}
  - export ep_dir="${CI_PROJECT_DIR}-ep"
  - export sb_dir="${CI_PROJECT_DIR}-sb-${git_hash}"
  - export pb_dir="${sb_dir}/NifTK-build"
  - hostname
  - whoami
  - pwd
  - echo "Sources - ${src_dir}"
  - echo "Commit - ${git_hash}"
  - echo "External projects - ${ep_dir}"
  - echo "Superbuild - ${sb_dir}"
  - echo "Project build - ${pb_dir}"


##########################################
# Continuous build jobs
##########################################

Linux continuous build:

  stage: build

  script:
    - mkdir -p ${sb_dir}
    - mkdir -p ${ep_dir}
    - cd ${sb_dir}
    - cmake -DEP_BASE:PATH=${ep_dir}
          -DEP_ALWAYS_USE_INSTALL_DIR:BOOL=OFF
          -DEP_DIRECTORY_PER_VERSION:BOOL=ON
          -DBUILD_TESTING:BOOL=ON
          -DBUILD_Caffe:BOOL=ON
          -DBUILD_LEGACY_COMMAND_LINE_PROGRAMS:BOOL=ON
          -DNIFTK_USE_CPPCHECK:BOOL=ON
          -DNIFTK_USE_KWSTYLE:BOOL=ON
          -DDESIRED_QT_VERSION:STRING=4
          -DNIFTK_Apps/NiftyMITKView:BOOL=ON
          -DNIFTK_Apps/NiftyIGI:BOOL=ON
          -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
          ${src_dir}
    - make -j 1

  only:
    - branches

  tags:
    - linux, continuous


# Mac continuous build:

  # stage: build

  # script:
    # - mkdir -p ${sb_dir}
    # - mkdir -p ${ep_dir}
    # - cd ${sb_dir}
    # - cmake -DEP_BASE:PATH=${ep_dir}
          # -DEP_ALWAYS_USE_INSTALL_DIR:BOOL=OFF
          # -DEP_DIRECTORY_PER_VERSION:BOOL=ON
          # -DBUILD_TESTING:BOOL=ON
          # -DBUILD_Caffe:BOOL=ON
          # -DBUILD_LEGACY_COMMAND_LINE_PROGRAMS:BOOL=ON
          # -DDESIRED_QT_VERSION:STRING=4
          # -DNIFTYLINK_CHECK_COVERAGE=ON
          # -DNIFTK_Apps/NiftyMITKView:BOOL=ON
          # -DNIFTK_Apps/NiftyIGI:BOOL=ON
          # -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
          # ${src_dir}
    # - make -j 4

  # only:
    # - branches

  # tags:
    # - mac, continuous


# Windows continuous build:

  # stage: build

  # script:
    # - mkdir -p ${sb_dir}
    # - mkdir -p ${ep_dir}
    # - cd ${sb_dir}
    # - /c/Multi-Runner/slowrunner.exe -v -2 -e "${src_dir}/Utilities/NifTKContinuousBuild.bat"
    # - tail -n 1 ${sb_dir}/build.log | grep -q ", 0 failed,"

  # only:
    # - branches

  # tags:
    # - windows, continuous


#Windows 32 bit continuous build:
#
#  stage: build
#
#  script:
#    - mkdir -p ${sb_dir}
#    - mkdir -p ${ep_dir}
#    - cd ${sb_dir}
#    - export BTYPE=Win32
#    - /c/Multi-Runner/slowrunner.exe -v -2 -e "${src_dir}/Utilities/NifTKContinuousBuild.bat"
#    - tail -n 1 ${sb_dir}/build.log | grep -q ", 0 failed,"
#
#  only:
#    - branches
#
#  tags:
#    - windows-32bit, continuous


##########################################
# Continuous test jobs
##########################################

Linux continuous test:

  stage: test

  script:
    - cd ${pb_dir}
    - export NIFTK_DRC_ANALYZE=ON
    - export DISPLAY=mespak3.cs.ucl.ac.uk:1
    - ctest -S CTestContinuous.cmake -V

  only:
    - branches

  tags:
    - linux, continuous


# Mac continuous test:

  # stage: test

  # script:
    # - cd ${pb_dir}
    # - export NIFTK_DRC_ANALYZE=ON
    # - export DISPLAY=mespak3.cs.ucl.ac.uk:1
    # - ctest -S CTestContinuous.cmake -V

  # only:
    # - branches

  # tags:
    # - mac, continuous


# Windows continuous test:

  # stage: test

  # script:
    # - cd ${pb_dir}
    # - ${src_dir}/Utilities/NifTKContinuousTest.bat

  # only:
    # - branches

  # tags:
    # - windows, continuous


#Windows 32 bit continuous test:
#
#  stage: test
#
#  script:
#    - cd ${pb_dir}
#    - ${src_dir}/Utilities/NifTKContinuousTest.bat
#
#  only:
#    - branches
#
#  tags:
#    - windows-32bit, continuous


##########################################
# Continuous deploy jobs
##########################################

Continuous docs:

  stage: deploy

  script:
    - version=`git describe`
    - cd ${pb_dir}
    - rm -rf Doxygen/html
    - chmod a+rx bin/GenerateCommandLineDoxygen
    - bin/GenerateCommandLineDoxygen
    - chmod a+rx bin/GenerateTestingReports
    - bin/GenerateTestingReports
    - doxygen doxygen.config
    - cd Doxygen
    - find html -type f -exec chmod 644 {} \;
    - find html -type d -exec chmod 755 {} \;
    - rm -rf niftk-${version}-docs
    - mv html niftk-${version}-docs
    - tar cfj niftk-${version}-docs.tar.bz2 niftk-${version}-docs
    - echo "API reference documentation generated:"
    - "# Upload the tarball"
    - scp niftk-${version}-docs.tar.bz2 cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/docs/
    - "# Extract the tarball and replace the old files"
    - ssh cmiclab "cd /cs/research/medic/cmiclab/deploy/CMIC/NifTK/docs ;
          rm -rf niftk-master-docs.tar.bz2 master ;
          tar xfj niftk-${version}-docs.tar.bz2 ;
          mv niftk-${version}-docs master ;
          mv niftk-${version}-docs.tar.bz2 niftk-master-docs.tar.bz2"

  only:
    - master

  tags:
    - linux, continuous


##########################################
# Continuous clean up jobs
##########################################

Linux continuous clean up:

  stage: cleanup

  script:
    - rm -rf ${sb_dir}
    - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
    - branches

  tags:
    - linux, continuous


# Mac continuous clean up:

  # stage: cleanup

  # script:
    # - rm -rf ${sb_dir}
    # - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  # when: always

  # only:
    # - branches

  # tags:
    # - mac, continuous


# Windows continuous clean up:

  # stage: cleanup

  # script:
    # - rm -rf ${sb_dir}
    # - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  # when: always

  # only:
  # - branches

  # tags:
  # - windows, continuous


#Windows 32 bit continuous clean up:
#
#  stage: cleanup
#
#  script:
#    - rm -rf ${sb_dir}
#    - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &
#
#  when: always
#
#  only:
#    - branches
#
#  tags:
#    - windows-32bit, continuous


##########################################
# Release build jobs
##########################################

Ubuntu 14.04 release build:

  stage: build

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - mkdir -p ${sb_dir}
    - cd ${sb_dir}
    - cmake -DBUILD_TESTING:BOOL=OFF
          -DNIFTK_USE_CPPCHECK:BOOL=OFF
          -DNIFTK_USE_KWSTYLE:BOOL=OFF
          -DDESIRED_QT_VERSION:STRING=4
          -DBUILD_Python:BOOL=ON
          -DBUILD_Caffe:BOOL=ON
          -DNIFTK_Apps/NiftyMITKView:BOOL=ON
          -DNIFTK_Apps/NiftyIGI:BOOL=ON
          -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
          ${src_dir}
    - make -j 8

  only:
    - tags

  tags:
    - linux, ubuntu-14.04, release


#Ubuntu 16.04 release build:
#
#  stage: build
#
#  script:
#    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
#    - mkdir -p ${sb_dir}
#    - cd ${sb_dir}
#    - cmake -DBUILD_TESTING:BOOL=OFF
#          -DNIFTK_USE_CPPCHECK:BOOL=OFF
#          -DNIFTK_USE_KWSTYLE:BOOL=OFF
#          -DDESIRED_QT_VERSION:STRING=4
#          -DBUILD_Python:BOOL=ON
#          -DBUILD_Caffe:BOOL=ON
#          -DNIFTK_Apps/NiftyMITKView:BOOL=ON
#          -DNIFTK_Apps/NiftyIGI:BOOL=ON
#          -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
#          ${src_dir}
#    - make -j 8
#
#  only:
#    - tags
#
#  tags:
#    - linux, ubuntu-16.04, release


CentOS 7 release build:

  stage: build

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - mkdir -p ${sb_dir}
    - cd ${sb_dir}
    - cmake -DBUILD_TESTING:BOOL=OFF
          -DNIFTK_USE_CPPCHECK:BOOL=OFF
          -DNIFTK_USE_KWSTYLE:BOOL=OFF
          -DNIFTK_SITK_FLAGS:STRING="--single-version-externally-managed;--root=/"
          -DDESIRED_QT_VERSION:STRING=4
          -DBUILD_Python:BOOL=ON
          -DBUILD_Caffe:BOOL=ON
          -DNIFTK_Apps/NiftyMITKView:BOOL=ON
          -DNIFTK_Apps/NiftyIGI:BOOL=ON
          -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
          ${src_dir}
    - make -j 8

  only:
    - tags

  tags:
    - linux, centos-7, release


CentOS 6 release build:

  stage: build

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export X264_DIR=/share/apps/cmic/niftk/x264
    - export FFMPEG_DIR=/share/apps/cmic/niftk/ffmpeg-2.1.8
    - export PATH="${FFMPEG_DIR}/bin:${PATH}"
    - export LD_LIBRARY_PATH="${X264_DIR}/lib:${FFMPEG_DIR}/lib"
    - mkdir -p ${sb_dir}
    - cd ${sb_dir}
    - cmake -DBUILD_TESTING:BOOL=OFF
          -DNIFTK_USE_CPPCHECK:BOOL=OFF
          -DNIFTK_USE_KWSTYLE:BOOL=OFF
          -DDESIRED_QT_VERSION:STRING=4
          -DBUILD_Python:BOOL=ON
          -DBUILD_Caffe:BOOL=ON
          -DOPENCV_WITH_FFMPEG:BOOL=ON
          -DNIFTK_Apps/NiftyMITKView:BOOL=ON
          -DNIFTK_Apps/NiftyIGI:BOOL=ON
          -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
          ${src_dir}
    - make

  only:
    - tags

  tags:
    - linux, centos-6, release


Mac release build:

  stage: build

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - mkdir -p ${sb_dir}
    - cd ${sb_dir}
    - cmake -DBUILD_TESTING:BOOL=OFF
          -DNIFTK_USE_CPPCHECK:BOOL=OFF
          -DNIFTK_USE_KWSTYLE:BOOL=OFF
          -DDESIRED_QT_VERSION:STRING=4
          -DBUILD_Python:BOOL=ON
          -DBUILD_Caffe:BOOL=ON
          -DNIFTK_Apps/NiftyMITKView:BOOL=ON
          -DNIFTK_Apps/NiftyIGI:BOOL=ON
          -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
          ${src_dir}
    - make -j 4

  only:
    - tags

  tags:
   - mac, release


Windows release build:

  stage: build

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - mkdir -p ${sb_dir}
    - cd ${sb_dir}
    - /c/Multi-Runner/slowrunner.exe -v -2 -e "${src_dir}/Utilities/NifTKReleaseBuild.bat"
    - tail -n 1 ${sb_dir}/build.log | grep -q ", 0 failed,"

  only:
    - tags

  tags:
    - windows, release


Windows 32 bit release build:

  stage: build

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - mkdir -p ${sb_dir}
    - cd ${sb_dir}
    - export BTYPE=Win32
    - /c/Multi-Runner/slowrunner.exe -v -2 -e "${src_dir}/Utilities/NifTKReleaseBuild.bat"
    - tail -n 1 ${sb_dir}/build.log | grep -q ", 0 failed,"

  only:
    - tags

  tags:
    - windows-32bit, release


##########################################
# Release test jobs
##########################################

# Dummy test jobs to prevent that deploy job is preceded by clean job.

Ubuntu 14.04 release test:

  stage: test

  script:
    - echo

  only:
    - tags

  tags:
    - linux, ubuntu-14.04, release


#Ubuntu 16.04 release test:
#
#  stage: test
#
#  script:
#    - echo
#
#  only:
#    - tags
#
#  tags:
#    - linux, ubuntu-16.04, release


CentOS 7 release test:

  stage: test

  script:
    - echo

  only:
    - tags

  tags:
    - linux, centos-7, release


CentOS 6 release test:

  stage: test

  script:
    - echo

  only:
    - tags

  tags:
    - linux, centos-6, release


Mac release test:

  stage: test

  script:
    - echo

  only:
    - tags

  tags:
    - mac, release


Windows release test:

  stage: test

  script:
    - echo

  only:
    - tags

  tags:
    - windows, release


Windows 32 bit release test:

  stage: test

  script:
    - echo

  only:
    - tags

  tags:
    - windows-32bit, release


##########################################
# Release deploy jobs
##########################################

# Generating documentation pages for tagged releases
Release docs:

  stage: deploy

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export pb_dir="${sb_dir}/NifTK-build"
    - version=${CI_COMMIT_TAG}
    - cd ${pb_dir}
    - rm -rf Doxygen/html
    - chmod a+rx bin/GenerateCommandLineDoxygen
    - bin/GenerateCommandLineDoxygen
    - doxygen doxygen.config
    - cd Doxygen
    - find html -type f -exec chmod 644 {} \;
    - find html -type d -exec chmod 755 {} \;
    - rm -rf niftk-${version}-docs
    - mv html niftk-${version}-docs
    - tar cfj niftk-${version}-docs.tar.bz2 niftk-${version}-docs
    - echo "API reference documentation generated:"
    - "# Upload the tarball"
    - scp niftk-${version}-docs.tar.bz2 cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/docs/
    - "# Extract the tarball and replace the old files"
    - ssh cmiclab "cd /cs/research/medic/cmiclab/deploy/CMIC/NifTK/docs ;
          rm niftk-latest-docs.tar.bz2 latest ;
          tar xfj niftk-${version}-docs.tar.bz2 ;
          mv niftk-${version}-docs ${version} ;
          ln -s niftk-${version}-docs.tar.bz2 niftk-latest-docs.tar.bz2 ;
          ln -s ${version} latest"

  only:
    - tags

  tags:
    - linux, ubuntu-14.04, release


Ubuntu 14.04 release installer:

  stage: deploy

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export pb_dir="${sb_dir}/NifTK-build"
    - version=${CI_COMMIT_TAG}
    - cd ${pb_dir}
    - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
    - source /etc/os-release
    - os_version="${ID}-${VERSION_ID}"
    - cpack --config CPackConfig.cmake
    - installer_file="niftk-${version}-${os_version}-x64.tar.bz2"
    - mv niftk-${niftk_version_string}.tar.bz2 ${installer_file}
    - "# Upload the tarball"
    - ssh cmiclab "mkdir -p /cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version"
    - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version/

  only:
    - tags

  tags:
    - linux, ubuntu-14.04, release


#Ubuntu 16.04 release installer:
#
#  stage: deploy
#
#  script:
#    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
#    - export pb_dir="${sb_dir}/NifTK-build"
#    - version=${CI_COMMIT_TAG}
#    - cd ${pb_dir}
#    - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
#    - source /etc/os-release
#    - os_version="${ID}-${VERSION_ID}"
#    - cpack --config CPackConfig.cmake
#    - installer_file="niftk-${version}-${os_version}-x64.tar.bz2"
#    - mv niftk-${niftk_version_string}.tar.bz2 ${installer_file}
#    - "# Upload the tarball"
#    - ssh cmiclab "mkdir -p /cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version"
#    - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version/
#
#  only:
#    - tags
#
#  tags:
#    - linux, ubuntu-16.04, release


CentOS 7 release installer:

  stage: deploy

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export pb_dir="${sb_dir}/NifTK-build"
    - version=${CI_COMMIT_TAG}
    - cd ${pb_dir}
    - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
    - source /etc/os-release
    - os_version="${ID}-${VERSION_ID}"
    - cpack --config CPackConfig.cmake
    - installer_file="niftk-${version}-${os_version}-x64.tar.bz2"
    - mv niftk-${niftk_version_string}.tar.bz2 ${installer_file}
    - "# Upload the tarball"
    - ssh cmiclab "mkdir -p /cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version"
    - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version/
    - "# Install on managed machines"
    - install_prefix=/cs/research/medic/common2/paramedic/share/cmic/niftk-scientific/niftk-${niftk_version_string}
    - install_tmp_dir="${install_prefix}-tmp"
    - ssh logno "mkdir ${install_tmp_dir} ;
          cd ${install_tmp_dir} ;
          wget https://cmiclab.cs.ucl.ac.uk/CMIC/NifTK/install/${installer_file} ;
          tar xfj ${installer_file} ;
          rm ${installer_file} ;
          cd `ls` ;
          install_path=`pwd` ;
          cd ../.. ;
          if [ -e ${install_prefix} ] ; then mv ${install_prefix} ${install_tmp_dir}/ ; fi ;
          mv ${install_path} ${install_prefix} ;
          rm niftk ;
          ln -s niftk-${niftk_version_string} niftk ;
          rm -rf ${install_tmp_dir}"

  only:
    - tags

  tags:
    - linux, centos-7, release


CentOS 6 release installer:

  stage: deploy

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export pb_dir="${sb_dir}/NifTK-build"
    - export X264_DIR=/share/apps/cmic/niftk/x264
    - export FFMPEG_DIR=/share/apps/cmic/niftk/ffmpeg-2.1.8
    - export PATH="${FFMPEG_DIR}/bin:${PATH}"
    - export LD_LIBRARY_PATH="${X264_DIR}/lib:${FFMPEG_DIR}/lib"
    - version=${CI_COMMIT_TAG}
    - cd ${pb_dir}
    - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
    - os_version="centos-6"
    - cpack --config CPackConfig.cmake
    - installer_file="niftk-${version}-${os_version}-x64.tar.bz2"
    - mv niftk-${niftk_version_string}.tar.bz2 ${installer_file}
    - "# Upload the tarball"
    - ssh cmiclab "mkdir -p /cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version"
    - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version/
    - "# Install on cluster"
    - install_prefix=/share/apps/cmic/niftk/niftk-${niftk_version_string}
    - install_tmp_dir="${install_prefix}-tmp"
    - mkdir ${install_tmp_dir}
    - cd ${install_tmp_dir}
    - tar xfj ${pb_dir}/${installer_file}
    - cd `ls`
    - install_path=`pwd`
    - cd ../..
    - if [ -e ${install_prefix} ] ; then mv ${install_prefix} ${install_tmp_dir}/ ; fi
    - mv ${install_path} ${install_prefix}
    - rm niftk
    - ln -s niftk-${niftk_version_string} niftk
    - rm -rf ${install_tmp_dir}

  only:
    - tags

  tags:
    - linux, centos-6, release


Mac release installer:

  stage: deploy

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export pb_dir="${sb_dir}/NifTK-build"
    - version=${CI_COMMIT_TAG}
    - cd ${pb_dir}
    - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
    - cpack --config CPackConfig.cmake
    - installer_file="niftk-${version}-mac-10.10.dmg"
    - mv niftk-${niftk_version_string}.dmg ${installer_file}
    - "# Upload the installer image"
    - ssh cmiclab "mkdir -p /cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version"
    - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version/

  only:
    - tags

  tags:
    - mac, release


Windows release installer:

  stage: deploy

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export pb_dir="${sb_dir}/NifTK-build"
    - version=${CI_COMMIT_TAG}
    - cd ${pb_dir}
    - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
    - ${src_dir}/Utilities/NifTKReleaseDeploy.bat
    - installer_file="niftk-${version}-windows-7-x64.exe"
    - mv niftk-${niftk_version_string}.exe ${installer_file}
    - "# Upload the installer image"
    - ssh cmiclab "mkdir -p /cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version"
    - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version/

  only:
    - tags

  tags:
    - windows, release


Windows 32 bit release installer:

  stage: deploy

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - export pb_dir="${sb_dir}/NifTK-build"
    - version=${CI_COMMIT_TAG}
    - cd ${pb_dir}
    - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
    - ${src_dir}/Utilities/NifTKReleaseDeploy.bat
    - installer_file="niftk-${version}-windows-7-x86.exe"
    - mv niftk-${niftk_version_string}.exe ${installer_file}
    - "# Upload the installer image"
    - ssh cmiclab "mkdir -p /cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version"
    - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/deploy/CMIC/NifTK/install/$version/

  only:
    - tags

  tags:
    - windows-32bit, release


##########################################
# Release clean up jobs
##########################################

Ubuntu 14.04 release clean up:

  stage: cleanup

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - rm -rf ${sb_dir}

  when: always

  only:
    - tags

  tags:
    - linux, ubuntu-14.04, release


#Ubuntu 16.04 release clean up:
#
#  stage: cleanup
#
#  script:
#    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
#    - rm -rf ${sb_dir}
#
#  when: always
#
#  only:
#    - tags
#
#  tags:
#    - linux, ubuntu-16.04, release


CentOS 7 release clean up:

  stage: cleanup

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - rm -rf ${sb_dir}

  when: always

  only:
    - tags

  tags:
    - linux, centos-7, release


CentOS 6 release clean up:

  stage: cleanup

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - rm -rf ${sb_dir}

  when: always

  only:
    - tags

  tags:
    - linux, centos-6, release


Mac release clean up:

  stage: cleanup

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - rm -rf ${sb_dir}

  when: always

  only:
    - tags

  tags:
    - mac, release


Windows release clean up:

  stage: cleanup

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - rm -rf ${sb_dir}

  when: always

  only:
    - tags

  tags:
    - windows, release


Windows 32 bit release clean up:

  stage: cleanup

  script:
    - export sb_dir="${sb_dir:0:${#sb_dir}-1}R"
    - rm -rf ${sb_dir}

  when: always

  only:
    - tags

  tags:
    - windows-32bit, release
