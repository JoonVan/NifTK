
stages:
  - build
  - test
  - deploy
  - cleanup

before_script:
  - export src_dir=${CI_PROJECT_DIR}
  - export git_hash=${CI_BUILD_REF:0:6}
  - export ep_dir="${CI_PROJECT_DIR}-ep"
  - export sb_dir="${CI_PROJECT_DIR}-sb-${git_hash}"
  - export pb_dir="${sb_dir}/NifTK-build"
  - hostname
  - whoami
  - pwd
  - echo "Sources - ${src_dir}"
  - echo "Commit - ${git_hash}"
  - echo "External projects - ${ep_dir}"
  - echo "Superbuild - ${sb_dir}"
  - echo "Project build - ${pb_dir}"

##########################################
# Jobs for continuous testing
##########################################

Linux continuous build:

  stage: build

  script:
  - mkdir -p ${sb_dir}
  - mkdir -p ${ep_dir}
  - cd ${sb_dir}
  - cmake -DEP_BASE:PATH=${ep_dir}
        -DEP_ALWAYS_USE_INSTALL_DIR:BOOL=OFF
        -DEP_DIRECTORY_PER_VERSION:BOOL=ON
        -DBUILD_TESTING:BOOL=ON
        -DBUILD_CAFFE:BOOL=ON
        -DNIFTK_USE_CPPCHECK:BOOL=ON
        -DNIFTK_USE_KWSTYLE:BOOL=ON
        -DDESIRED_QT_VERSION:STRING=4
        -DNIFTK_Apps/NiftyView:BOOL=ON
        -DNIFTK_Apps/NiftyIGI:BOOL=ON
        -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
        ${src_dir}
  - make -j 8

  only:
  - branches

  tags:
  - linux, continuous


Linux continuous test:

  stage: test

  script:
  - cd ${pb_dir}
  - export NIFTK_DRC_ANALYZE=ON
  - export DISPLAY=mespak3.cs.ucl.ac.uk:1
  - ctest -S CTestContinuous.cmake -V

  only:
  - branches

  tags:
  - linux, continuous


Continuous docs:

  stage: deploy

  script:
  - version=`git describe`
  - cd ${pb_dir}
  - rm -rf Doxygen/html
  - chmod a+rx bin/GenerateCommandLineDoxygen
  - bin/GenerateCommandLineDoxygen
  - chmod a+rx bin/GenerateTestingReports
  - bin/GenerateTestingReports
  - doxygen doxygen.config
  - cd Doxygen
  - find html -type f -exec chmod 644 {} \;
  - find html -type d -exec chmod 755 {} \;
  - rm -rf niftk-${version}-docs
  - mv html niftk-${version}-docs
  - tar cfj niftk-${version}-docs.tar.bz2 niftk-${version}-docs
  - echo "API reference documentation generated:"
  - "# Upload the tarball"
  - scp niftk-${version}-docs.tar.bz2 cmiclab:/cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/docs/
  - "# Extract the tarball and replace the old files"
  - ssh cmiclab "cd /cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/docs ;
        rm -rf `readlink -f niftk-master-docs.tar.bz2` `readlink -f master` ;
        rm niftk-master-docs.tar.bz2 master ;
        tar xfj niftk-${version}-docs.tar.bz2 ;
        mv niftk-${version}-docs ${version} ;
        ln -s niftk-${version}-docs.tar.bz2 niftk-master-docs.tar.bz2 ;
        ln -s ${version} master"

  only:
  - master

  tags:
  - linux, continuous


Linux continuous clean up:

  stage: cleanup

  script:
  - rm -rf ${sb_dir}
  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
  - branches

  tags:
  - linux, continuous


Mac continuous build:

  stage: build

  script:
  - mkdir -p ${sb_dir}
  - mkdir -p ${ep_dir}
  - cd ${sb_dir}
  - cmake -DEP_BASE:PATH=${ep_dir}
        -DEP_ALWAYS_USE_INSTALL_DIR:BOOL=OFF
        -DEP_DIRECTORY_PER_VERSION:BOOL=ON
        -DBUILD_TESTING:BOOL=ON
        -DBUILD_CAFFE:BOOL=ON
        -DDESIRED_QT_VERSION:STRING=4
        -DNIFTYLINK_CHECK_COVERAGE=ON
        -DNIFTK_Apps/NiftyView:BOOL=ON
        -DNIFTK_Apps/NiftyIGI:BOOL=ON
        -DNIFTK_Apps/NiftyMIDAS:BOOL=ON
        ${src_dir}
  - make -j 4

  only:
  - branches

  tags:
  - mac, continuous


Mac continuous test:

  stage: test

  script:
  - cd ${pb_dir}
  - export NIFTK_DRC_ANALYZE=ON
  - export DISPLAY=mespak3.cs.ucl.ac.uk:1
  - ctest -S CTestContinuous.cmake -V

  only:
  - branches

  tags:
  - mac, continuous


Mac continuous clean up:

  stage: cleanup

  script:
  - rm -rf ${sb_dir}
  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
  - branches

  tags:
  - mac, continuous


Windows continuous build:

  stage: build

  script:
  - mkdir -p ${sb_dir}
  - mkdir -p ${ep_dir}
  - cd ${sb_dir}
  - /c/CB/slowrunner.exe -v -2 -e "c:\CB\NifTKContinuousBuild.bat"

  only:
  - branches

  tags:
  - windows, continuous


Windows continuous test:

  stage: test

  script:
  - cd ${pb_dir}
#  - ctest -E CTE-Stream -S CTestContinuous.cmake -V

  only:
  - branches

  tags:
  - windows, continuous


Windows continuous clean up:

  stage: cleanup

  script:
  - rm -rf ${sb_dir}
  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
  - branches

  tags:
  - windows, continuous


##########################################
# Jobs for deploying tagged releases
##########################################


Ubuntu 14.04 release build:

  stage: build

  script:
  - mkdir -p ${sb_dir}
  - cd ${sb_dir}
  - cmake -DBUILD_TESTING:BOOL=OFF
        -DNIFTK_USE_CPPCHECK:BOOL=OFF
        -DNIFTK_USE_KWSTYLE:BOOL=OFF
        -DDESIRED_QT_VERSION:STRING=4
        -DBUILD_Python:BOOL=ON
        -DBUILD_CAFFE:BOOL=ON
        -DNIFTK_Apps/NiftyView:BOOL=ON
        -DNIFTK_Apps/NiftyIGI:BOOL=ON
        ${src_dir}
  - make -j 8

  only:
  - tags

  tags:
  - linux, ubuntu-14.04, release


CentOS 7 release build:

  stage: build

  script:
  - mkdir -p ${sb_dir}
  - cd ${sb_dir}
  - cmake -DBUILD_TESTING:BOOL=OFF
        -DNIFTK_USE_CPPCHECK:BOOL=OFF
        -DNIFTK_USE_KWSTYLE:BOOL=OFF
        -DDESIRED_QT_VERSION:STRING=4
        -DBUILD_Python:BOOL=ON
        -DBUILD_CAFFE:BOOL=ON
        -DNIFTK_Apps/NiftyView:BOOL=ON
        -DNIFTK_Apps/NiftyIGI:BOOL=ON
        ${src_dir}
  - make -j 8

  only:
  - tags

  tags:
  - linux, centos-7, release


CentOS 6 release build:

  stage: build

  script:
  - export X264_DIR=/share/apps/cmic/niftk/x264
  - export FFMPEG_DIR=/share/apps/cmic/niftk/ffmpeg-2.1.8
  - export PATH="${FFMPEG_DIR}/bin:${PATH}"
  - export LD_LIBRARY_PATH="${X264_DIR}/lib:${FFMPEG_DIR}/lib"
  - mkdir -p ${sb_dir}
  - cd ${sb_dir}
  - cmake -DBUILD_TESTING:BOOL=OFF
        -DNIFTK_USE_CPPCHECK:BOOL=OFF
        -DNIFTK_USE_KWSTYLE:BOOL=OFF
        -DDESIRED_QT_VERSION:STRING=4
        -DBUILD_Python:BOOL=ON
        -DBUILD_CAFFE:BOOL=ON
        -DOPENCV_WITH_FFMPEG:BOOL=ON
        -DNIFTK_Apps/NiftyView:BOOL=ON
        -DNIFTK_Apps/NiftyIGI:BOOL=ON
        ${src_dir}
  - make

  only:
  - tags

  tags:
  - linux, centos-6, release


Mac release build:

  stage: build

  script:
  - mkdir -p ${sb_dir}
  - cd ${sb_dir}
  - cmake -DBUILD_TESTING:BOOL=OFF
        -DNIFTK_USE_CPPCHECK:BOOL=OFF
        -DNIFTK_USE_KWSTYLE:BOOL=OFF
        -DDESIRED_QT_VERSION:STRING=4
        -DBUILD_Python:BOOL=ON
        -DBUILD_CAFFE:BOOL=ON
        -DNIFTK_Apps/NiftyView:BOOL=ON
        -DNIFTK_Apps/NiftyIGI:BOOL=ON
        ${src_dir}
  - make -j 4

  only:
  - tags

  tags:
  - mac, release


# Dummy test jobs to prevent that deploy job is preceded by clean job.

Ubuntu 14.04 release test:

  stage: test

  script:
  - echo

  only:
  - tags

  tags:
  - linux, ubuntu-14.04, release


CentOS 7 release test:

  stage: test

  script:
  - echo

  only:
  - tags

  tags:
  - linux, centos-7, release


CentOS 6 release test:

  stage: test

  script:
  - echo

  only:
  - tags

  tags:
  - linux, centos-6, release


# Dummy test job to prevent that deploy job is preceded by clean job.
Mac release test:

  stage: test

  script:
  - echo

  only:
  - tags

  tags:
  - mac, release


# Generating documentation pages for tagged releases
Release docs:

  stage: deploy

  script:
  - version=${CI_BUILD_TAG}
  - cd ${pb_dir}
  - rm -rf Doxygen/html
  - chmod a+rx bin/GenerateCommandLineDoxygen
  - bin/GenerateCommandLineDoxygen
  - doxygen doxygen.config
  - cd Doxygen
  - find html -type f -exec chmod 644 {} \;
  - find html -type d -exec chmod 755 {} \;
  - rm -rf niftk-${version}-docs
  - mv html niftk-${version}-docs
  - tar cfj niftk-${version}-docs.tar.bz2 niftk-${version}-docs
  - echo "API reference documentation generated:"
  - "# Upload the tarball"
  - scp niftk-${version}-docs.tar.bz2 cmiclab:/cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/docs/
  - "# Extract the tarball and replace the old files"
  - ssh cmiclab "cd /cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/docs ;
        rm niftk-latest-docs.tar.bz2 latest ;
        tar xfj niftk-${version}-docs.tar.bz2 ;
        mv niftk-${version}-docs ${version} ;
        ln -s niftk-${version}-docs.tar.bz2 niftk-latest-docs.tar.bz2 ;
        ln -s ${version} latest"

  only:
  - tags

  tags:
  - linux, ubuntu-14.04, release


Ubuntu 14.04 release installer:

  stage: deploy

  script:
  - version=${CI_BUILD_TAG}
  - cd ${pb_dir}
  - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
  - source /etc/os-release
  - os_version="${ID}-${VERSION_ID}"
  - cpack --config CPackConfig.cmake
  - installer_file="niftk-${version}-linux-${os_version}-x64.tar.bz2"
  - mv niftk-${niftk_version_string}.tar.bz2 ${installer_file}
  - "# Upload the tarball"
  - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/install/

  only:
  - tags

  tags:
  - linux, ubuntu-14.04, release


CentOS 7 release installer:

  stage: deploy

  script:
  - version=${CI_BUILD_TAG}
  - cd ${pb_dir}
  - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
  - source /etc/os-release
  - os_version="${ID}-${VERSION_ID}"
  - cpack --config CPackConfig.cmake
  - installer_file="niftk-${version}-linux-${os_version}-x64.tar.bz2"
  - mv niftk-${niftk_version_string}.tar.bz2 ${installer_file}
  - "# Upload the tarball"
  - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/install/
  - "# Install on managed machines"
  - install_prefix=/cs/research/medic/common2/paramedic/share/cmic/niftk-scientific/niftk-${niftk_version_string}
  - install_tmp_dir="${install_prefix}-tmp"
  - ssh logno "mkdir ${install_tmp_dir} ;
        cd ${install_tmp_dir} ;
        wget https://cmiclab.cs.ucl.ac.uk/CMIC/NifTK/install/${installer_file} ;
        tar xfj ${installer_file} ;
        rm ${installer_file} ;
        cd `ls` ;
        install_path=`pwd` ;
        cd ../.. ;
        if [ -e ${install_prefix} ] ; then mv ${install_prefix} ${install_tmp_dir}/ ; fi ;
        mv ${install_path} ${install_prefix} ;
        rm niftk ;
        ln -s niftk-${niftk_version_string} niftk ;
        rm -rf ${install_tmp_dir}"

  only:
  - tags

  tags:
  - linux, centos-7, release


CentOS 6 release installer:

  stage: deploy

  script:
  - export X264_DIR=/share/apps/cmic/niftk/x264
  - export FFMPEG_DIR=/share/apps/cmic/niftk/ffmpeg-2.1.8
  - export PATH="${FFMPEG_DIR}/bin:${PATH}"
  - export LD_LIBRARY_PATH="${X264_DIR}/lib:${FFMPEG_DIR}/lib"
  - version=${CI_BUILD_TAG}
  - cd ${pb_dir}
  - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
  - os_version="centos-6"
  - cpack --config CPackConfig.cmake
  - installer_file="niftk-${version}-linux-${os_version}-x64.tar.bz2"
  - mv niftk-${niftk_version_string}.tar.bz2 ${installer_file}
  - "# Upload the tarball"
  - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/install/
  - "# Install on cluster"
  - install_prefix=/share/apps/cmic/niftk/niftk-${niftk_version_string}
  - install_tmp_dir="${install_prefix}-tmp"
  - mkdir ${install_tmp_dir}
  - cd ${install_tmp_dir}
  - tar xfj ${installer_file}
  - cd `ls`
  - install_path=`pwd`
  - cd ../..
  - if [ -e ${install_prefix} ] ; then mv ${install_prefix} ${install_tmp_dir}/ ; fi
  - mv ${install_path} ${install_prefix}
  - rm niftk
  - ln -s niftk-${niftk_version_string} niftk
  - rm -rf ${install_tmp_dir}

  only:
  - tags

  tags:
  - linux, centos-6, release


Mac release installer:

  stage: deploy

  script:
  - version=${CI_BUILD_TAG}
  - cd ${pb_dir}
  - niftk_version_string=`grep "NIFTK_VERSION_STRING:STRING" CMakeCache.txt | cut -c 29-`
  - cpack --config CPackConfig.cmake
  - installer_file="niftk-${version}-mac-10.10.dmg"
  - mv niftk-${niftk_version_string}.dmg ${installer_file}
  - "# Upload the installer image"
  - scp ${installer_file} cmiclab:/cs/research/medic/cmiclab/gitlab/deploy/CMIC/NifTK/install/

  only:
  - tags

  tags:
  - mac, release


##########################################
# Jobs for cleaning up
##########################################


Ubuntu 14.04 release clean up:

  stage: cleanup

  script:
  - rm -rf ${sb_dir}
  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
  - tags

  tags:
  - linux, ubuntu-14.04, release


CentOS 7 release clean up:

  stage: cleanup

  script:
  - rm -rf ${sb_dir}
  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
  - tags

  tags:
  - linux, centos-7, release


CentOS 6 release clean up:

  stage: cleanup

  script:
  - rm -rf ${sb_dir}
  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
  - tags

  tags:
  - linux, centos-6, release


Mac release clean up:

  stage: cleanup

  script:
  - rm -rf ${sb_dir}
  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &

  when: always

  only:
  - tags

  tags:
  - mac, release


#Windows release clean up:
#
#  stage: cleanup
#
#  script:
#  - rm -rf ${sb_dir}
#  - ${src_dir}/Utilities/niftk-ep-clean-up.sh ${src_dir} ${ep_dir} &
#
#  when: always
#
#  only:
#  - tags
#
#  tags:
#  - windows, release
