#!/bin/bash

#/*================================================================================
#
#  NifTK: An image processing toolkit jointly developed by the
#              Dementia Research Centre, and the Centre For Medical Image Computing
#              at University College London.
#  
#  See:        http://dementia.ion.ucl.ac.uk/
#              http://cmic.cs.ucl.ac.uk/
#              http://www.ucl.ac.uk/
#
#  Copyright (c) UCL : See LICENSE.txt in the top level directory for details. 
#
#  Last Changed      : $LastChangedDate: 2010-05-28 22:05:02 +0100 (Fri, 28 May 2010) $ 
#  Revision          : $Revision: 3326 $
#  Last modified by  : $Author: mjc $
#
#  Original author   : m.clarkson@ucl.ac.uk
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.  See the above copyright notices for more information.
#
#=================================================================================*/
#
# Script to run TBSS in a basic kind of way.
# 

function Usage()
{
  cat <<EOF

This script runs TBSS on a batch of images, from initial FA images up to (and not including) the stats stage.

Usage: tbssGroup.sh dataFile [ options ]

Mandatory Arguments:
    
  dataFile         : A file containing your patient group identifier, and image filename.
  
                     Group FileName
                     C     /var/drc/scratch1/...<etc>...<etc>.../01001-001-1.img
                     C     /var/drc/scratch1/...<etc>...<etc>.../01002-001-1.img
                     P     /var/drc/scratch1/...<etc>...<etc>.../01003-001-1.img
                     P     /var/drc/scratch1/...<etc>...<etc>.../01004-001-1.img
                  
                  
                     Group can be any identifier for your group:
                       e.g. 'C' for control, 'P' for patient
                       e.g. 1,2,3
                    
                       DONT put spaces in these identifiers, as we use it to construct a file name.
                       Also, TBSS processes image file names alphabetically, so the group ID should 
                       preferably be selected so that the control group is first. So, C and P are
                       not bad suggestions.

Optional Arguments:

  -s directoryName : Sub-directory name.  The whole study gets put in a subdirectory
                     relative to where you are running this command from.
                     Default is todays date. e.g. 2009-05-11-17-31-38
  
  -e email         : Specify an email address, to be notified upon completion.                    
  -z emailServer   : Specify a mail server, [default smtp.drc.ion.ucl.ac.uk]                    
  -f <int>         : first line in file to start at
  -l <int>         : last line in file to finish at  
  
  -t <float>       : FA Threshold to threshold skeleton at [default 0.2]               

  -o               : FA source image orientation (e.g. as they are stored in Midas) [default LPS]
  -p               : FA target image orientation (e.g. as we want them in TBSS pipeline) [default LAS]

  -a               : Additional image types in datafile, identify from header information and import
  -b <f val>       : Use b0 BET masking on the FA volumes, needs the -a option and a b0 column
                   
EOF
exit 127                            
}

# Check args
if [ $# -lt 1 ]; then
  Usage
fi

source _niftkCommon.sh

# Get the filename, and check it exists.
filename=$1
shift

check_file_exists $filename

n=`wc -l $filename | sed -n 's/^\(.*\) .*/\1/p'`
n=$(($n-1))

# Parse command line
sub_dir=`date +%Y-%m-%d-%k-%M-%S`
st=1
fin=$n
email=
threshold=0.2
server=smtp.drc.ion.ucl.ac.uk
target_orientation=LAS
source_orientation=LPS
extraim=
betf=

while [ "_$1" != "_" ] ; do
    if [ "$1" = "-f" ] ; then
        st=$2
        shift 2
    elif [ "$1" = "-l" ] ; then
        fin=$2
        shift 2
    elif [ "$1" = "-s" ] ; then
        sub_dir="$2"
        shift 2
    elif [ "$1" = "-e" ] ; then
        email=$2
        shift 2
    elif [ "$1" = "-t" ] ; then
        threshold=$2
        shift 2     
    elif [ "$1" = "-z" ] ; then
        server=$2
        shift 2
    elif [ "$1" = "-o" ] ; then
        source_orientation=$2
        shift 2                   
    elif [ "$1" = "-p" ] ; then
        target_orientation=$2
        shift 2                   
    elif [ "$1" = "-b" ] ; then
        betf=$2
        shift 2                   
    elif [ "$1" = "-a" ] ; then
        extraim=-a
        shift 1                
    else
        Usage
    fi
done

logfile="${sub_dir}/log.txt"

dos_2_unix $filename

# Create subdirectory, and copy import file there.
if ! [ -d $sub_dir ]; then
  mkdir $sub_dir
fi
cp $filename $sub_dir

echo "Using input file:$filename, starting at line $st and finishing at line $fin, putting data into $sub_dir, thresholding at $threshold" | tee -a >> $logfile

unset fields
unset Bfield
fieldcount=2
if [ "$extraim" != "" ] ; then
    for (( N=1; ; N++ )) ; do
	F=`awk 'NR == 1 {print $'$N'}' $filename` ;
	if [ "$F" = "" ] ;
	    then break ;
	fi ;
	fields[${#fields[@]}]=$F ;
	if [ "${F}" = "b0" ] ; then
	    Bfield=$N #Index to awk field number
	fi
	if [ "${F}" = "FA" -a "${N}" != 2 ] ; then
	    echo "FA can only be provided in column #2"
	    exit
	fi
    done
    fieldcount=$((N-1)) #Index to final awk field number
    if [ $fieldcount -lt 2 ] ; then
	echo "Need at least one image field (FA)"
	exit
    fi
fi

if [ "${betf}" != "" ] ; then
    if [ "${Bfield}" = "" ] ; then
	echo "Option -b used, but -a option not used or no b0 column found"
	exit
    fi
fi


# Check all images files exist.
i=$st
while [ "$i" -le "$fin" ]
do

  group=`awk 'NR-1 == '$i' {print $1}' $filename`

  for (( field=2 ; field <= fieldcount ; field++ )) ; do
      file=`awk 'NR-1 == '$i' {print $'$field'}' $filename`
  if [ "_$group" = "_" ]; then
  
    echo "Skipping line $i, as group is empty" | tee -a >> $logfile
    
  elif [ "_$file" = "_" ]; then
    
    echo "Skipping line $i, as file is empty" | tee -a >> $logfile
  
  else

    files=`ls ${file}* | wc -l `
    
    if [ $files -eq 0 ]; then
      echo "Can't find file $file" | tee -a >> $logfile
      exit -1
    else
      echo "Group:${group}	File:${file}" | tee -a >> $logfile
    fi
    
  fi
  done
  # Increment loop counter
  i=$(($i+1))
  
done

if [ "$extraim" != "" ] ; then
#Starting at 2 is the first additional image field
    for (( ii=2; ii<fieldcount ; ii++ )) ; do
	command="mkdir ${sub_dir}/${fields[$ii]}"
	echo $command | tee -a >> $logfile 
	eval $command | tee -a >> $logfile
    done
fi

# Copy and convert to .nii
i=$st
while [ "$i" -le "$fin" ]
do
  group=`awk 'NR-1 == '$i' {print $1}' $filename`
  for (( field=2 ; field <= fieldcount ; field++ )) ; do
      type=""
      file=`awk 'NR-1 == '$i' {print $'$field'}' $filename`
      if [ $field -gt 2 ] ; then
	  type="${fields[$((field-1))]}" #Unfortunately working in awk field numbers
      fi
      typed="${type}/"

  dirname=`dirname $file`
  basename=`basename $file`
  basenameNoGz=`basename $file .gz`
  basenameNoImg=`basename $file .img`
  basenameNoImgGz=`basename $file .img.gz`

  fafile=`awk 'NR-1 == '$i' {print $2}' $filename`
  fafilebase=$(basename ${fafile%.gz} .img)
  fafile=${sub_dir}/${group}-${fafilebase}.nii

  if [ "_${basenameNoImgGz}.img.gz" = "_$basename" ]; then

      echo "Converting $file to ${sub_dir}/${group}-${basenameNoImgGz}.nii"  
      cp -f ${dirname}/${basenameNoImgGz}.* .      
      gunzip ./${basenameNoImgGz}.img.gz
      command="mri_convert --in_orientation $source_orientation --out_orientation $target_orientation ./${basenameNoImgGz}.img ${sub_dir}/${typed}${group}-${fafilebase}.nii"
      echo $command | tee -a >> $logfile 
      eval $command | tee -a >> $logfile
      rm -f ./${basenameNoImgGz}.*
      
  elif [ "_${basenameNoImg}.img" = "_$basename" ]; then

      echo "Converting $file to ${sub_dir}/${group}-${basenameNoImg}.nii"  
      command="mri_convert --in_orientation $source_orientation --out_orientation $target_orientation $file ${sub_dir}/${typed}${group}-${fafilebase}.nii"
      echo $command | tee -a >> $logfile 
      eval $command | tee -a >> $logfile

  else
      echo "Converting $file to ${sub_dir}/${group}-${basename}.nii"  
      command="mri_convert --in_orientation $source_orientation --out_orientation $target_orientation $file ${sub_dir}/${typed}${group}-${fafilebase}.nii"
      echo $command | tee -a >> $logfile 
      eval $command | tee -a >> $logfile      
  fi

  if [ "${betf}" != "" -a "${type}" = "b0" ] ; then
      #basenameonly=${basename%.gz}
      #basenameonly=${basenameonly%.img}
      command="FSLOUTPUTTYPE=NIFTI bet ${sub_dir}/${typed}${group}-${fafilebase}.nii ${sub_dir}/${typed}${group}-${fafilebase}.nii -m -n -f $betf"
      echo $command | tee -a >> $logfile 
      eval $command | tee -a >> $logfile      
  fi

  done

  if [ "${betf}" != "" ] ; then
      #maskfile=`awk 'NR-1 == '$i' {print $'$Bfield'}' $filename`
      #maskfile=$(basename ${maskfile%.gz} .img)
      maskfile=${sub_dir}/b0/${group}-${fafilebase}_mask.nii
      command="FSLOUTPUTTYPE=NIFTI fslmaths $fafile -mul $maskfile $fafile"
      echo $command | tee -a >> $logfile 
      eval $command | tee -a >> $logfile      
  fi
  
  
  # Increment loop counter
  i=$(($i+1))  
done


cd $sub_dir
tbss_1_preproc `ls *.nii` 
tbss_2_reg -T
tbss_3_postreg -S
tbss_4_prestats $threshold

if [ "$extraim" != "" ] ; then
  for (( field=3 ; field <= fieldcount ; field++ )) ; do
      type="${fields[$((field-1))]}"
      tbss_non_FA $type
  done
fi

cd ..

finishTime=`date`
if [ "_$email" = "_" ]; then
  echo "Done at $finishTime" | tee -a >> $logfile
else
  msg="tbssGroup.sh for $filename, finished at $finishTime"
  echo "$msg"| smtp="$server" mailx -s "$msg" $email
fi
