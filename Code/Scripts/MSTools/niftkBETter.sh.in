#!/bin/bash 

#/*=============================================================================
#
# NifTK: An image processing toolkit jointly developed by the
#             Dementia Research Centre, and the Centre For Medical Image Computing
#             at University College London.
# 
# See:        http://dementia.ion.ucl.ac.uk/
#             http://cmic.cs.ucl.ac.uk/
#             http://www.ucl.ac.uk/
#
# Last Changed      : $Date: 2012-10-17 14:43:44 +0000 (Wed, 17 Oct 2012) $
# Revision          : $Revision: 1 $
# Last modified by  : $Author: fp $
#
# Original author   : f.carrasco@ucl.ac.uk
#
# Copyright (c) UCL : See LICENSE.txt in the top level directory for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the above copyright notices for more information.
#
# ============================================================================*/
#
# This script is for BET mask calculation using Pospescu et al. Neuroimage 2012 
# brain extraction process and Boyes et al. Neuroimage 2008 normalization process. 
#
# The basic method is:
# If the user runs niftkBETter.sh --xml we respond with the XML function contained herein.
# All other command line invocations, we pass the parameters onto the underlying program.

source _niftkCommon.sh

###### DEFAULT OPTIONS #######

# This options for n3 has been extracted from Boyes et al. Neuroimage 2008 page 1756
n3_options='-clobber -stop 0.000100 -fwhm 0.050000 -distance 150 -iterations 1000 -shrink 2'
dir_output='noneck/'
unalias rm 2> /dev/null # don't ask about removing existing files

# Directory configurations for change the default
dir_niftyreg=""
mnidir=""
n3dir=""

# Function  : Clean temp directory 
#
function cleanup
{
	if [[ -d ../${dir_output} ]] ; then
		cd ..
	fi
	if [[ -d ${dir_output} ]] ; then
		rm -rf  ${dir_output}
	fi
}
trap "cleanup" EXIT SIGINT SIGTERM SIGKILL


# Function  : Data normalization
#
# Param	    : $1 input image 
# Param     : $2 patient name
function normalization() 
{
	local img=$1
	local name=$2
	
	# Normalization
	if [[ ! -f "${img}_n3.nii"  ]] ; then
		# Delete temporally files
		execute_command_or_else_stop "rm -f ${img}.mnc ${img}_n3.mnc ${img}_n3.imp ${img}_n3_register.nii"
		execute_command_or_else_stop "rm -f ${img}_ICBM152_mask_register*" 
		
		# Move tissues mask to target space
		execute_command_or_else_stop "${dir_niftyreg}reg_resample \
			-ref ${img}.nii \
			-flo ${MASK_IMAGE} \
			-aff source-to-target-12dof.txt \
			-res ${img}_ICBM152_mask_register.nii \
			-NN"
		
		# Set tissues mask from float to char
		execute_command_or_else_stop "fslmaths \
			${img}_ICBM152_mask_register.nii \
			-bin \
			${img}_ICBM152_mask_register-bin.nii \
			-odt char"

		# Change format to NIFTI
		execute_command_or_else_stop "rm -f ${img}_ICBM152_mask_register.nii"
		execute_command_or_else_stop "fslchfiletype NIFTI ${img}_ICBM152_mask_register-bin.nii.gz ${img}_ICBM152_mask_register.nii"
		execute_command_or_else_stop "rm -f ${img}_ICBM152_mask_register-bin.nii.gz"  

		# Change format to mnc
		execute_command_or_else_stop "${mnidir}nii2mnc $img.nii $img.mnc"
		execute_command_or_else_stop "${mnidir}nii2mnc ${img}_ICBM152_mask_register.nii ${img}_ICBM152_mask_register.mnc"
		progress "0.30" "Image ready to be normalized"
		
		# This options for n3 has been extracted from Boyes et al. Neuroimage 2008 page 1756
		if [[ ! -f "${img}_n3.mnc"  ]] ; then		
			execute_command_or_else_stop "${n3dir}nu_correct $n3_options \
			-mask ${img}_ICBM152_mask_register.mnc \
			${img}.mnc \
			${img}_n3.mnc" > /dev/null
		fi		
		progress "0.45" "Image normalized"

		# Change format from mnc to NIFTI
		execute_command_or_else_stop "${mnidir}mnc2nii -nii ${img}_n3.mnc ${img}_n3.nii"
		
		# Delete temporally files
		execute_command_or_else_stop "rm -f ${img}_n3.mnc *.hdr *.img"
		execute_command_or_else_stop "rm -f ${img}.mnc ${img}_n3.imp ${img}_n3_register.nii"
		execute_command_or_else_stop "rm -f ${img}_ICBM152_mask_register* source-to*"

		# For security reasons ;) we copy geometry for align at the same direction the new image
		#execute_command_or_else_stop "fslcpgeom ${img}.nii ${img}_n3.nii"
	else
		echo "File ${img}_n3.nii exists, we don't repeat the calculation "
	fi
}

# Function  : This function remove neck from a T1 brain data
#
# Param	    : $1 input image
# Param     : $2 patient name
function remove_neck() {
	local img=$1
	local name=$2
	
	if [[ ! -f "${img}_no_neck.nii"  ]] ; then
		progress "0.1" "Registring atlas"
		
		# Register atlas to target space
		execute_command_or_else_stop "${dir_niftyreg}reg_aladin \
			-ref ${img}.nii \
			-flo ${HEAD_IMAGE} \
			-aff source-to-target-12dof.txt \
			-res ${img}_neck_register.nii \
			-sym \
			-lp 5" 
		progress "0.15" "Atlas registered"
			
		# Move whole headmask to target space			
		execute_command_or_else_stop "${dir_niftyreg}reg_resample \
			-ref ${img}.nii \
			-flo ${HEADMASK_IMAGE} \
			-aff source-to-target-12dof.txt \
			-res ${img}_ICBM152_mask_register.nii \
			-NN"
			
		# Remove neck of input image	
		execute_command_or_else_stop "${dir_niftyreg}reg_tools \
			-in ${img}.nii \
			-nan ${img}_ICBM152_mask_register.nii \
			-out ${img}_no_neck.nii"

		# Convert nan to 0, if not, BET crashes
		execute_command_or_else_stop "fslmaths ${img}_no_neck.nii -nan ${img}_no_neck-nonan.nii"
		execute_command_or_else_stop "rm -f ${img}_no_neck.nii"
		execute_command_or_else_stop "fslchfiletype NIFTI ${img}_no_neck-nonan ${img}_no_neck.nii"

		# Delete temporally files
		execute_command_or_else_stop "rm -f ${img}_ICBM152_mask_register.* ${img}_neck_register* ${img}_no_neck-nonan*"

		# For security reasons ;) we copy geometry for align at the same direction the new image
		#execute_command_or_else_stop "fslcpgeom ${img}.nii ${img}_no_neck.nii"
	else
		echo "File ${img}_no_neck.nii exists, we don't repeat the calculation "
	fi
}

# Function  : Calculating brain mask following Pospescu 2012 Neuroimage 
#
# Param	    : $1 input image
# Param	    : $2 output image
# Param     : $3 patient name
# Param     : $4 options for BET
# Param     : $5 fractional intensity threshold
function BETter() 
{
	local img=$1
	local output_result=$2
	local name=$3
	local opt=$4
	local frac=$5
	
	# Starting brain extraction process
	if [[ ! -f "${output_result}"  ]] ; then
		# First remove neck slices according to Popescu 2012 method
		remove_neck ${img} ${name}
		progress "0.2" "Neck removed"

		# Normalize intesity for image following from Boyes et al. Neuroimage 2008 page 1756
		normalization ${img}_no_neck ${name}

		progress "0.6" "Calculating brain extraction: bet ${opt} -f ${frac}"
		
		# Pospescu 2012 Neuroimage article suggests that best parameters could be -B -f 0.1, previously neck removal
		execute_command_or_else_stop "bet ${img}_no_neck_n3 ${img}_brain -m -s ${opt} -f ${frac}" 
		
		progress "0.9" "Copying results"
		
		# Change format to NIFTI
		execute_command_or_else_stop "fslchfiletype NIFTI ${img}_brain.nii.gz output.nii"
		execute_command_or_else_stop "fslchfiletype NIFTI ${img}_brain_mask.nii.gz output_mask.nii"
		execute_command_or_else_stop "fslchfiletype NIFTI ${img}_brain_skull.nii.gz output_skull.nii"
		
		# Delete temp files
		execute_command_or_else_stop "rm -f *.nii.gz"

		# Copy all the results
		execute_command_or_else_stop "cp output.nii ${output_result}"
		execute_command_or_else_stop "cp output_mask.nii ${output_result/%\.???/_mask.nii}"
		execute_command_or_else_stop "cp output_skull.nii ${output_result/%\.???/_skull.nii}"
	else
		echo "File ${output_result} exists, we don't repeat the calculation "
	fi
	
	execute_command_or_else_stop "rm -f ${img}*_no_neck*"

}
# Function  : Copy files to a specific destination as NIFTI file
#
# Param	    : $1 input image
# Param	    : $2 output directory
# Param     : $3 output image
function copyFileToDestination() {
	local full_image=${1}
	local dir_output=${2}
	local image=${3}

	if isNifti ${full_image}  ; then
		execute_command_or_else_stop "cp ${full_image} ${dir_output}${image}.nii"
	else
		execute_command_or_else_stop "fslchfiletype NIFTI ${full_image} ${dir_output}${image}.nii"
	fi
}

# Function  : Check if a file is a NIFTI file
#
function isNifti()  {
    # requires 'shopt -s extglob'
    [[ "$1" == ?*.nii ]]
}

# Function  : If the user runs niftkBETter.sh --xml we respond with the XML function contained herein.
#
function UsageXML() {
cat <<EOF
<?xml version="1.0" encoding="utf-8"?>
<executable>
   <category>MS Tools.Segmentation</category>
   <title>BET Brain segmentation improved</title>
   <description><![CDATA[This script, provided within @NIFTK_PLATFORM@, is for BET mask calculation using Pospescu et al. Neuroimage 2012 
   brain extraction process and Boyes et al. Neuroimage 2008 normalization process.<br>
   <ul>
   <li><i>Input image</i>, selects the file that you would like to segment</li>
   <li><i>Input atlas data</i>, selects the ATLAS data file, ex: ICBM-152/lin-1.0/icbm_avg_152_t1_tal_lin.nii, you need to be careful that it exists overlapping between this image and input image.</li>
   <li><i>Input headmask atlas data</i>, selects the ATLAS headmask data file, ex: ICBM-152/lin-1.0/icbm_avg_152_t1_tal_lin_headmask.nii</li>
   <li><i>Input mask atlas data</i>, selects the ATLAS mask data file, ex: ICBM-152/lin-1.0/icbm_avg_152_t1_tal_lin_mask.nii</li>
   <li><i>Output image</i>, select the name and the directory of the output file where the segmented image will be recorded. The output file is in NIFTI format. The output file is composed for three files:
	<ul>
	<li><i>output.nii</i>, it contains the segmented brain</li>
	<li><i>output_mask.nii</i>, it correponds to the brain mask of the segmented brain</li>
	<li><i>output_skull.nii</i>, it correponds to the brain skull of the segmented brain</li>
	</ul>
   </li>
   </ul>
   <br>
   <p><h2>Recomendations:</h2></p>
   <p>
   For ADNI data swaps dimensions x y z to -y -z x and removes s form information of ICBM 152.<br> 
   Atlas head maks, mask and data files. For other data sources you would need to check it.<br>
   Check that it exists an important overlapping between mask, headmask, head and input file.<br>
   </p>
   ]]></description>
   <version>@NIFTK_VERSION_MAJOR@.@NIFTK_VERSION_MINOR@</version>
   <documentation-url>http://www.sciencedirect.com/science/article/pii/S1053811912003552</documentation-url>
   <license>BSD</license>
   <contributor>Ferran Prados (UCL)</contributor>
   <parameters advanced="false">
      <label>Input and output images</label>
      <description>Input image to be segmented and the name of output image</description>
      <image fileExtensions="*.nii,*.nii.gz,*.img">
          <name>inputImageName</name>
          <longflag>in</longflag>
	  <description>Input image name</description>
	  <label>Input image</label>
	  <channel>input</channel>
      </image>
      <image fileExtensions="*.nii,*.nii.gz,*.img">
          <name>inputHead</name>
          <longflag>atlas</longflag>
	  <description>Input atlas data</description>
	  <label>Input atlas data</label>
	  <channel>input</channel>
      </image>
      <image fileExtensions="*.nii,*.nii.gz,*.img">
          <name>inputIHeadMask</name>
          <longflag>headmask</longflag>
	  <description>Input atlas head mask</description>
	  <label>Input atlas head mask</label>
	  <channel>input</channel>
      </image>
      <image fileExtensions="*.nii,*.nii.gz,*.img">
          <name>inputMask</name>
          <longflag>mask</longflag>
	  <description>Input atlas mask</description>
	  <label>Input atlas mask</label>
	  <channel>input</channel>
      </image>
      <image fileExtensions="*.nii">
          <name>outputImageName</name>
          <longflag>out</longflag>
	  <description>Output image name</description>
	  <label>Output image</label>
	  <default>output.nii</default>
          <channel>output</channel>
      </image>
   </parameters>
   <parameters advanced="true">
    <label>Variations on default BET functionality</label>
    <description>BET options</description>
    <string-enumeration>
      <name>BEToptions</name>
      <longflag>bet</longflag>
      <description><![CDATA[Variations on default BET functionality: 
      B - bias field & neck cleanup, 
      S - eye & optic nerve cleanup, 
      R - robust brain centre estimation and 
      Z - improve BET if FOV is very small in Z]]></description>
      <label>BET options</label>
      <default>B</default>
      <element>B</element>
      <element>S</element>
      <element>R</element>
      <element>Z</element>
    </string-enumeration>
    <float>
      <name>FractionalIntensityThreshold</name>
      <longflag>f</longflag>
      <description><![CDATA[Fractional intensity threshold (0-1); 
      default=0.1 for Pospescu et al. 2012 paper. 
      In BET, 0.5 is the default value. 
      Lower values than default give larger brain outlines; 
      higher values lead to smaller brain outlines.]]></description>
      <label>Fractional intensity threshold</label>
      <default>0.1</default>
      <constraints>
        <minimum>0</minimum>
        <maximum>1</maximum>
        <step>0.1</step>
      </constraints>
    </float>
    </parameters>
</executable>
EOF
exit 0
}

# Function  : If the user runs niftkBETter.sh -h, --help or without parameters we respond with the Usage function contained herein.
#
function Usage() {
cat <<EOF

This script is for BET mask calculation using Pospescu et al. Neuroimage 2012 
brain extraction process and Boyes et al. Neuroimage 2008 normalization process. 

Usage: $0 --in input_file --out output_file --headmask head_mask_file --mask mask_file --atlas head_file

Mandatory Arguments:
 
  --in		: is the input file in NIFTI format
  --out		: is the output file in NIFTI format
  --headmask	: is the headmask atlas file in NIFTI format
  --mask	: is the mask atlas file in NIFTI format
  --atlas	: is the atlas data file in NIFTI format
  --bet		: variations on default BET functionality: B, S, R or Z. (see BET for more information), by default -B
  --f		: fractional intensity threshold (0->1); by default 0.1.

Recomendations:

	For ADNI data swaps dimensions x y z to -y -z x and removes s form information of ICBM 152 
	Atlas head maks, mask and data files. For other data sources you would need to check it.
	Check that it exists an important overlapping between mask, headmask, head and input file.
	
EOF
exit 127
}

# Function  : this function output a log of the progress for Command Line Module plugin
#
# Param	    : $1 integer [0..100], it is the progression percentage
# Param	    : $2 string, it is an information message
function progress(){
	echo "<filter-progress-text progress=\"$1\">$2</filter-progress-text>"  
	sleep 1 # sleep 1000ms to avoid squashing the last progress event with the finished event
}

# Function  : this function open the log progress for Command Line Module plugin
#
# Param	    : $1 string, it is an information message, usually the program name
function openprogress() {
	echo "<filter-start>" 
	echo "<filter-name>$1</filter-name>"
	echo "<filter-comment>$1</filter-comment>"  
	echo "</filter-start>" 
	sleep 1 # sleep 1000ms to avoid squashing the last progress event with the finished event
}

# Function  : this function close the log progress for Command Line Module plugin
#
# Param	    : $1 string, it is an information message with name of output image
function closeprogress() {
	echo "<filter-result name=\"outputImageName\">$1</filter-result>"
	echo "<filter-result name=\"exitStatusOutput\">Normal exit</filter-result>"
	echo "<filter-progress>1</filter-progress>"
	echo "<filter-end><filter-comment>Finished successfully.</filter-comment></filter-end>"
}


# Program start
num=0
f="0.1"
options="-B"
if [ $# -eq 0 ]; then
  Usage
fi

# Parse remaining command line options
while [ "$#" -gt 0 ]
do
    case $1 in
    --xml)
	UsageXML
	;;
    -h)
	Usage
	;;
    --help)
	Usage
	;;
    --in)
	INPUT_IMAGE=$2
	shift 1
	;;
    --out)
	OUTPUT_IMAGE=$2
	shift 1
	;;
    --headmask)
	HEADMASK_IMAGE=$2
	shift 1
	;;
    --mask)
	MASK_IMAGE=$2
	shift 1
	;;
    --atlas)
	HEAD_IMAGE=$2
	shift 1
	;;
    --bet)
	options="-$2"
	shift 1
	;;
    --f)
	f="$2"
	shift 1
	;;
    -*)
	Usage
	exitprog "Error: option $1 not recognised" 1
	 ;;
    esac
    shift 1
done

# Start of the main program
openprogress "BETter Starts with options: ${options} -f ${f}"
progress "0.04" "Checking programs"

# Check that all programs exist
check_program_exists fslcpgeom
check_program_exists fslchfiletype
check_program_exists bet
check_program_exists fslmaths
check_program_exists reg_aladin
check_program_exists reg_resample
check_program_exists reg_tools
check_program_exists nii2mnc
check_program_exists mnc2nii
check_program_exists nu_correct

progress "0.08" "Checking input and output file"
if [[ -d ${OUTPUT_IMAGE} ]] ; then
	echo "${OUTPUT_IMAGE} is not a file, select a file"
	exit 1
fi

# Check if all needed files exist
check_file_exists ${INPUT_IMAGE} 
check_file_exists ${HEAD_IMAGE}
check_file_exists ${MASK_IMAGE}
check_file_exists ${HEADMASK_IMAGE}

# Get specific information
patient='nifTK_'`date +"%Y%m%d-%H%M%S"`
dir_output=${patient}-${dir_output}

# Create an output directory and copy data
if [[ ! -d $dir_output ]] ; then
	execute_command_or_else_stop "mkdir -p ${dir_output}"
fi
copyFileToDestination ${INPUT_IMAGE} ${dir_output} "input_image" 

# Go to the output directory
execute_command_or_else_stop "cd ${dir_output}"

# Start process
BETter "input_image" ${OUTPUT_IMAGE} ${patient} ${options} ${f}

# Delete temporary directory
execute_command_or_else_stop "rm -f *.nii *.mnc *.txt" 
execute_command_or_else_stop "cd .."
execute_command_or_else_stop "rm -rf ${dir_output}"

progress "1" "Finish"
closeprogress ${OUTPUT_IMAGE}
# End of the main program
