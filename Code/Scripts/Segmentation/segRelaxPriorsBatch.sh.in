#!/bin/bash

#/*================================================================================
#
#  NifTK: An image processing toolkit jointly developed by the
#              Dementia Research Centre, and the Centre For Medical Image Computing
#              at University College London.
#  
#  See:        http://dementia.ion.ucl.ac.uk/
#              http://cmic.cs.ucl.ac.uk/
#              http://www.ucl.ac.uk/
#
#  Copyright (c) UCL : See LICENSE.txt in the top level directory for details. 
#
#  Last Changed      : $LastChangedDate: 2010-05-28 22:05:02 +0100 (Fri, 28 May 2010) $ 
#  Revision          : $Revision: 3326 $
#  Last modified by  : $Author: mjc $
#
#  Original author   : m.clarkson@ucl.ac.uk
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.  See the above copyright notices for more information.
#
#=================================================================================*/
# Script to run a batch of images through Jorge's segmentation.

source _niftkCommon.sh

ndefargs=1
keeptmp=0
tmp_root=/tmp/
tmpdir=
use_tmp_dir=0
use_tmp_root=0
spm_dir=
set_spm_dir=0
use_fsl=0
atlas=
use_atlas=0
grey_prior= 
use_grey=0
white_prior=
use_white=0
csf_prior=
use_csf=0
deep_grey_prior=
use_deep_grey=0
internal_csf_prior=
use_internal_csf=0
use_gpu=0
levels_pyramid=3
levels_perform=2
dilations=2

command_file=segRelaxPriorsBatch_$$_commands.txt   

function Usage()
{
cat <<EOF

This script runs Jorge's segmentation as described in [1],
using linear [2] and non-linear [3] registration to an atlas.

Usage: segRelaxPriorsBatch.sh input_file.txt [options] 

Mandatory Arguments:
 
  input_file.txt          : A datafile containing 2 columns, tab separated
                            1st column, the full path of the input image
                            2nd column, the full path of the brain mask image

Options:

  -atlas        image.nii : Atlas image.
  
                            The atlas could, for example, be the
                            one found in spm8/canonical/avg152T1.nii or avg305T1.nii
                           
  -grey         image.nii : Grey matter prior, in same space as atlas. 
  -white        image.nii : White matter prior, in same space as atlas.
  -csf          image.nii : CSF prior, in same space as atlas.

                            These apriori arguments could, for example, be 
                            the priors in spm8/apriori directory.

  -deepgrey     image.nii : Grey matter prior image with deep grey matter masked out.
  
  -internalcsf  image.nii : CSF prior image, with internal CSF masked out.
                             
  -spm                    : SPM directory, which if specified is added
                            onto the front of the MATLABPATH variable
                           
  -fsl                    : Use FSL (FLIRT/FNIRT) instead of the default reg_aladin, reg_ffd.
                             
  -tmproot dir            : Define a root directory for temporary files. Default /tmp
  
  -tmpdir dir             : Set temporary workspace directory (If not set, will
                            use environment variable \$TMPDIR, and then allocate
                            one in /tmp if \$TMPDIR not set

  -keeptmp                : Keep temporary workspace directory
  
  -gpu                    : If using underlying nifty_reg package, and not FSL, turn on GPU

  -levels                 : The number of multi-resolution levels in pyramid. Default 3.
  
  -levels_to_perform      : The number of multi-resolution levels to actually optimise. Default 3.

  -dilations              : The number of dilations of brain mask. Default 2.


[1] Manuel Jorge Cardoso, Matthew J. Clarkson, Gerard R. Ridgway,
Marc Modat, Nick C Fox and Sebastien Ourselin, 
"Improved Maximum A Posteriori Cortical Segmentation by Iterative Relaxation Of Priors" 
G.-Z. Yang et al. (Eds):MICCAI 2009, Part II, LNCS 5762, pp. 441-449, 2009.
                             
[2] Sebastien Ourselin, A Roche, G Subsol, Xavier Pennec, and Nicholas Ayache.
"Reconstructing a 3d structure from serial histological sections" 
Image and Vision Computing, 19(2000) 25-31: doi:10.1016/S0262-8856(00)00052-4    

[3] Marc Modat, Gerard R. Ridgway, Zeike A Taylor, Manja Lehmann,
Josephine Barnes, Nick C Fox, David J Hawkes, and Sebastien Ourselin.
"Fast free-form deformation using graphics processing units" 
Comput Meth Prog Bio 2009: doi:10.1016/j.cmpb.2009.09.002

                             
EOF
exit 127
}

function IterateThroughFile()
{
  local filename=$1
  local mode=$2
  
  n=`wc -l $filename | sed -n 's/^\(.*\) .*/\1/p'`
  i=0

  while [ "$i" -lt "$n" ] 
  do

    input=`awk 'NR-1 == '$i' {print $1}' $filename`
    mask=`awk 'NR-1 == '$i' {print $2}' $filename`

    if [ "$mode" = "GENERATE" ]; then

      if [ $set_spm_dir -eq 1 ]; then
        spm_arg=" -spm $spm_dir "
      fi
      
      if [ $use_fsl -eq 1 ]; then
        fsl_arg=" -fsl "
      fi

      if [ $use_gpu -eq 1 ]; then
        gpu_arg=" -gpu "
      fi
      
      if [ $use_atlas -eq 1 ]; then
        atlas_arg=" -atlas $atlas "
      fi
      
      if [ $use_grey -eq 1 ]; then
        grey_arg=" -grey $grey_prior "
      fi
      
      if [ $use_white -eq 1 ]; then
        white_arg=" -white $white_prior "
      fi
      
      if [ $use_csf -eq 1 ]; then
        csf_arg=" -csf $csf_prior "
      fi
      
      if [ $use_deep_grey -eq 1 ]; then
        deep_grey_arg=" -deep_grey $deep_grey_prior "
      fi
      
      if [ $use_internal_csf -eq 1 ]; then
        internal_csf_arg=" -internal_csf $internal_csf_prior"
      fi
      
      if [ $use_tmp_dir -eq 1 ]; then
        tmp_arg=" -tmpdir $tmpdir "
      elif [ $use_tmp_root -eq 1 ]; then
        tmp_arg=" -tmproot $tmp_root "
      fi

      if [ $keeptmp -eq 1 ]; then
        keep_tmp_arg=" -keeptmp "
      fi
            
      # Generate a file of all commands
      echo "segRelaxPriors.sh $input $mask -levels $levels_pyramid -levels_to_perform $levels_perform $spm_arg $gpu_arg $fsl_arg $atlas_arg $grey_arg $white_arg $csf_arg $deep_grey_arg $internal_csf_arg $tmp_arg $keep_tmp_arg -dilations ${dilations} " >> $command_file 

    else
      check_file_exists $input
      check_file_exists $mask
      checkf_writeable $output
    fi
    
    # Increment loop counter
    i=$(($i+1))
  done
  
}

if [ $# -lt $ndefargs ]; then
    Usage
    exitprog "$help\nError: Incorrect number of arguments...."
fi

data_file=$1

# Parse remaining command line options
shift $ndefargs
while [ "$#" -gt 0 ]
do
    case $1 in
	-tmpdir)
	    tmpdir=$2
	    shift 1
	    use_tmp_dir=1
	    ;;
	-tmproot)
	    tmp_root=$2
	    shift 1
	    use_tmp_root=1
	    ;;
    -keeptmp)
	    keeptmp=1
	    ;;    
    -spm)
        spm_dir=$2
        shift 1
        set_spm_dir=1
	    ;;
	-atlas)
	    atlas=$2
	    shift 1
	    use_atlas=1
	    ;;
	-grey)
	    grey_prior=$2
	    shift 1
	    use_grey=1
	    ;;
	-white)
	    white_prior=$2
	    shift 1
	    use_white=1
	    ;;
	-csf)
	    csf_prior=$2
	    shift 1
	    use_csf=1
	    ;;
	-deep_grey)
	    deep_grey_prior=$2
	    shift 1
	    use_deep_grey=1
	    ;;
	-internal_csf)
	    internal_csf_prior=$2
	    shift 1
	    use_internal_csf=1
	    ;;	    	    
	-fsl)
	    use_fsl=1
	    ;;
	-gpu)
	    use_gpu=1
	    ;;
	-levels)
	    levels_pyramid=$2
	    shift 1
	    ;;
	-levels_to_perform)
	    levels_perform=$2
	    shift 1
	    ;;	   
	-dilations)
	    dilations=$2
	    shift 1
	    ;;	     	      	    	    	    	    	    	    
    -*)
	    exitprog "Error: option $1 not recognised" 1
	    ;;
    esac
    shift 1
done

if [ ! -f $data_file ]; then
    exitprog "Datafile $data_file does not exist" 1
fi

if [ $use_atlas -eq 1 ]; then
  if [ ! -f $atlas ]; then
    exitprog "The atlas image does not exist!" 1
  fi
fi

if [ $use_grey -eq 1 ]; then
  if [ ! -f $grey_prior ]; then
    exitprog "The grey matter prior image does not exist!" 1
  fi
fi

if [ $use_white -eq 1 ]; then
  if [ ! -f $white_prior ]; then
    exitprog "The white matter prior image does not exist!" 1
  fi
fi

if [ $use_csf -eq 1 ]; then
  if [ ! -f $csf_prior ]; then
    exitprog "The csf matter prior image does not exist!" 1
  fi
fi

if [ $use_deep_grey -eq 1 ]; then
  if [ ! -f $deep_grey_prior ]; then
    exitprog "The deep grey matter prior image does not exist!" 1
  fi
fi

if [ $use_internal_csf -eq 1 ]; then
  if [ ! -f $internal_csf_prior ]; then
    exitprog "The internal_csf prior image does not exist!" 1
  fi
fi

if [ $set_spm_dir -eq 1 ]; then
  check_directory_exists $spm_dir
fi

echo "Starting $0 with:"
echo "  data_file=$data_file"
echo "  atlas=$atlas"
echo "  use_atlas=$use_atlas"
echo "  grey_prior=$grey_prior"
echo "  use_grey=$use_grey"
echo "  white_prior=$white_prior"
echo "  use_white=$use_white"
echo "  csf_prior=$csf_prior"
echo "  use_csf=$use_csf"
echo "  deep_grey_prior=$deep_grey_prior"
echo "  use_deep_grey=$use_deep_grey"
echo "  internal_csf_prior=$internal_csf_prior"
echo "  use_internal_csf=$use_internal_csf"
echo "  spm_dir=$spm_dir"
echo "  set_spm_dir=$set_spm_dir"
echo "  use_fsl=$use_fsl"
echo "  tmp_root=$tmp_root"
echo "  tmpdir=$tmpdir"
echo "  keeptmp=$keeptmp"
echo "  use_tmp_dir=$use_tmp_dir"
echo "  use_tmp_root=$use_tmp_root"
echo "  levels_pyramid=$levels_pyramid"
echo "  levels_perform=$levels_perform"
echo "  dilations=$dilations"

check_program_exists matlab
check_program_exists fslchfiletype
if [ $use_fsl -eq 1 ]; then
  check_program_exists fnirt
  check_program_exists flirt
else
  check_program_exists reg_aladin
  check_program_exists reg_f3d
  check_program_exists reg_resample
  check_program_exists reg_full.sh
fi

IterateThroughFile $data_file "CHECK" $use_fsl $use_tmp_dir $use_tmp_root $tmp_root $tmpdir $keeptmp

IterateThroughFile $data_file "GENERATE" $use_fsl $use_tmp_dir $use_tmp_root $tmp_root $tmpdir $keeptmp

run_batch_job $command_file

