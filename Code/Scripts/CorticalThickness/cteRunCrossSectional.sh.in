#!/bin/bash

#/*============================================================================
#
#  NifTK: A software platform for medical image computing.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

# Script to run cross section cortical thickness estimation for a single subject.

source _niftkCommon.sh

# You need to generate this. You cant do `dirname $0` as it wont work on the cluster.
progdir=@NIFTK_INSTALL_BIN_DIR@

ndefargs=3
keeptmp=0
tmp_root=/tmp
use_tmp_dir=0
spm_dir=
set_spm_dir=0
use_gpu=0
atlas=${progdir}/../matlab/segmentation/single_subj_T1.nii
use_atlas=0
region_atlas=${progdir}/../matlab/segmentation/ROI_MNI_V4.nii
use_region_atlas=0
grey_prior= 
use_grey=0
white_prior=
use_white=0
csf_prior=
use_csf=0
deep_grey_prior=
use_deep_grey=0
internal_csf_prior=
use_internal_csf=0
min_classification_prob=0
do_connected_components=0
laplacian_epsilon=0.0001
laplacian_iters=200
pde_epsilon=0.0001
pde_iters=100
levels_pyramid=3
levels_perform=2
output_basename=
region_numbers=
use_region_numbers=0
dilations=2
refine_labels=0
iso_tropic=0.5
resample_isotropic=0
initp=0.5
method=1
voxel_multiplication=1
use_voxel_multiplication=0

# Note: The automatic doxygen generator uses the first two lines of the usage message.

function Usage()
{
cat <<EOF

This script runs cortical thickness estimation for a single subject, using voxel based methods.
In a nutshell, we run segmentation as described in [1], using linear [2] and non-linear [3]
registration, then run voxel based cortical thickness estimation as described in [4].

Usage: cteRunCrossSectional.sh image.nii mask.nii name [options] 

Mandatory Arguments:
 
  image.nii                : The T1 image you want the thickness estimation for.
  
  mask.nii                 : Brain mask, in same space as image.nii.
  
  name                     : Basename for the output. Output images are:
              
                             <name>_label.nii
                             <name>_GMfc.nii
                             <name>_WMfc.nii
                             <name>_CSFfc.nii
                             <name>_dGM.nii
                             <name>_iCSF.nii                				 
                             <name>_thickness.nii
                             <name>_smoothed_thickness.nii

Options:

  -spm <directory>         : ** This will be compulsory if you don't already have spm in your MATLABPATH. **
                             SPM directory, which if specified is added onto the front of the MATLABPATH variable

  -tmproot <directory>     : Define a root directory for temporary files. Default /tmp
                             The difference between this option and the next, is that this
                             one takes the root directory (eg. /tmp) and creates a sub directory
                             with a process ID in it. (eg. /tmp/seg.1234) whereas the next option
                             just uses exactly what you give it.
                            
  -tmpdir <directory>      : Set temporary workspace directory.

  -keeptmp                 : Keep temporary workspace directory (for debugging purposes).
  
  -gpu                     : Turn on GPU for reg_aladin, reg_f3d. No memory checking done.

****************************
* Registration parameters  *
****************************

  -levels <int>            : The number of Free-Form Deformation multi-resolution levels in pyramid. Default 3.
  
  -levels_to_perform <int> : The number of Free-Form Deformation multi-resolution levels to actually optimise. Default 2.

  -dilations <int>         : Number of dilations to apply to mask, when registering/segmenting. Default 2.

****************************
* Segmentation parameters  *
****************************
  
  -atlas         image.nii : Atlas image, used for segmentation priors.
  
                             The atlas could, for example, be the
                             one found in spm8/canonical/avg152T1.nii or avg305T1.nii
                           
  -grey          image.nii : Grey matter prior, in same space as segmentation atlas. 
  -white         image.nii : White matter prior, in same space as segmentation atlas.
  -csf           image.nii : CSF prior, in same space as segmentation atlas.

                             These apriori arguments could, for example, be 
                             the priors in spm8/apriori directory.

  -deep_grey     image.nii : Grey matter prior image containing only deep grey matter,
                             in same space as segmentation atlas.
  
  -internal_csf  image.nii : CSF prior image, containing only internal CSF,
                             in same space as segmentation atlas.

****************************
* Labelling parameters     *
****************************

  -isotropic <float>       : Resample to isotropic voxels after segmentation step. Default off.
  
  -minp <float>            : When we classify GM, WM, CSF probability maps into a 3 label segmentation
                             you can specify a minimum probability (for GM only) below which the voxel is ignored.
                             This defaults to zero, and the classification picks the highest value
                             of the GM, WM, CSF as the label. 

  -connected               : Do connected component analysis when classifying GM, WM, CSF probability maps
                             into a 3 label segmentation. Default off.

  -refine_labels           : Refines the label image, by calling cteRefineLabelImage.sh. Default off.

****************************
* Thickness parameters     *
****************************
  
  -lapl_epsilon <float>    : Convergence tolerance for Laplacian solution.
  
  -lapl_iters <int>        : Maximum iterations for Laplacian solution.
  
  -pde_epsilon <float>     : Convergence tolerance for PDE solution (see [5]).
  
  -pde_iters <int>         : Maximum iterations for PDE solution (see [5]).
  
  -initp                   : Target probability threshold to iterate towards when doing Lagrangian initialisation. Default 0.5.

  -method [int]            : Slightly different methods in the cortical thickness bit:
                             1. Correct the GM, as describe in Acosta's paper, section 2.3, and use Lagrangian initialization
                             2. Correct the GM, as described in Bourgeat's paper, section 2.3.1, and use Lagrangian initialization
                             3. Do not correct the GM, and initialize the CSF/WM boundary voxels to minus half the voxel diagonal (images should really be isotropic), as described in Diep's paper
                             4. Use Jorge's method, no Lagrangian initialization.
                             5. Correct the GM, as described in Acosta's paper, then do Jorge's initialization, rather than Lagrangian

  -vmf [int]               : Voxel multiplication factor, a bit like supersampling. This overrides the -method flag.
                             So, if you are doing high res, the underlying method will be like specifying -method 1.
                                     
****************************
* Statistics parameters    *
****************************
  
  -region_atlas image.nii  : An image containing containing segmentation labels, in same space as atlas.

  -regions 1,2,3,4         : A comma separated list of region numbers to extract stats for.
                             These region numbers should correspond to the labels in your -stats_regions image.  
                             
  
[1] Manuel Jorge Cardoso, Matthew J. Clarkson, Gerard R. Ridgway,
Marc Modat, Nick C Fox and Sebastien Ourselin, 
"Improved Maximum A Posteriori Cortical Segmentation by Iterative Relaxation Of Priors" 
G.-Z. Yang et al. (Eds):MICCAI 2009, Part II, LNCS 5762, pp. 441-449, 2009.
                             
[2] Sebastien Ourselin, A Roche, G Subsol, Xavier Pennec, and Nicholas Ayache.
"Reconstructing a 3d structure from serial histological sections" 
Image and Vision Computing, 19(2000) 25-31: doi:10.1016/S0262-8856(00)00052-4    

[3] Marc Modat, Gerard R. Ridgway, Zeike A Taylor, Manja Lehmann,
Josephine Barnes, Nick C Fox, David J Hawkes, and Sebastien Ourselin.
"Fast free-form deformation using graphics processing units" 
Comput Meth Prog Bio 2009: doi:10.1016/j.cmpb.2009.09.002

[4] Oscar Acosta, Pierrick Bourgeat, Maria A. Zuluaga, Jurgen Fripp, Olivier Salvado
Sebastien Ourselin, and the Alzheimer's Disease NeuroImaging Initiative.
"Automated voxel-based 3D cortical thickness measurement in a combined Lagrangian-
Eulerian PDE approach using partial volume maps"
Medical Image Analysis 13 (2009) 730-743: doi:10.1016/j.media.2009.07.003

[5] Anthony. J. Yezzi and Jerry L. Prince.
"An Eulerian PDE approach for Computing Tissue Thickness"
IEEE Transactions On Medical Imaging Vol 22. No 10. October 2003.

EOF
exit 127
}

# Check args

check_for_help_arg "$*"
if [ $? -eq 1 ]; then
  Usage
fi

if [ $# -lt $ndefargs ]; then
  Usage
fi

# Get required parameters
image=$1
mask=$2
output_basename=$3

# Parse remaining command line options
shift $ndefargs
while [ "$#" -gt 0 ]
do
    case $1 in
	-tmpdir)
	    tmpdir=$2
	    shift 1
	    ;;
	-tmproot)
	    tmp_root=$2
	    shift 1
	    ;;
	-dilations)
	    dilations=$2
	    shift 1
	    ;;	    
    -keeptmp)
	    keeptmp=1
	    ;;
	-spm)
	    spm_dir=$2
	    shift 1
	    set_spm_dir=1
	    ;;
	-atlas)
	    atlas=$2
	    shift 1
	    use_atlas=1
	    ;;
	-grey)
	    grey_prior=$2
	    shift 1
	    use_grey=1
	    ;;
	-white)
	    white_prior=$2
	    shift 1
	    use_white=1
	    ;;
	-csf)
	    csf_prior=$2
	    shift 1
	    use_csf=1
	    ;;
	-deep_grey)
	    deep_grep_prior=$2
	    shift 1
	    use_deep_grey=1
	    ;;
	-internal_csf)
	    internal_csf_prior=$2
	    shift 1
	    use_internal_csf=1
	    ;;	    
	-gpu)
	    use_gpu=1
	    ;;
	-connected)
	    do_connected_components=1
	    ;;	
	-minp)
	    min_classification_prob=$2
	    shift 1
	    ;;
	-lapl_epsilon)
	    laplacian_epsilon=$2
	    shift 1
	    ;;
	-lapl_iters)
	    laplacian_iters=$2
	    shift 1
	    ;;
	-pde_epsilon)
	    pde_epsilon=$2
	    shift 1
	    ;;
	-pde_iters)
	    pde_iters=$2
	    shift 1
	    ;;	  
	-levels)
	    levels_pyramid=$2
	    shift 1
	    ;;
	-levels_to_perform)
	    levels_perform=$2
	    shift 1
	    ;;
	-region_atlas)
	    region_atlas=$2
	    use_region_atlas=1
	    shift 1
	    ;;	 
	-regions)
	   	region_numbers=$2
	   	use_region_numbers=1
	   	shift 1
	   	;; 
	-refine_labels)
	    refine_labels=1
	    ;;
	-isotropic)
	    iso_tropic=$2
	    resample_isotropic=1
	    shift 1
	    ;;      
	-initp)
	    initp=$2
	    shift 1
	    ;;	   
	-method)
	    method=$2
	    shift 1
	    ;; 	  
	-vmf)
	    voxel_multiplication=$2
	    use_voxel_multiplication=1
	    shift 1
	    ;;           	           	    	         
    -*)
	    exitprog "Error: option $1 not recognised" 1
	    ;;
    esac
    shift 1
done

# Use the environment variable TMPDIR
# if defined, otherwise make one up
# NB this gets overwritten if specified
# on the command line
ptmpdir=$tmp_root/cte.$$
if [ "_$tmpdir" = "_" ]; then
  tmpdir=$ptmpdir
fi

# Catch signals
trap '
    savestatus=$?
    if [ $keeptmp -eq 0 ] 
    then 
        rm -rf "$tmpdir" 
    fi && exit $savestatus
' 0

trap '
    savestatus=$?
    echo "Caught signal, cleaning up..."
    if [ $keeptmp -eq 0 ] 
    then
        echo "Removing temporary directory $tmpdir..."
        rm -rf "$tmpdir"
    else
        echo "Keeping temporary directory $tmpdir..."
    fi
    (exit $savestatus); exit
' 1 2 13 15

# Check command line arguments

if [ ! -f $image ]; then
    exitprog "The image to be segmented does not exist!" 1
fi

if [ ! -f $mask ]; then
    exitprog "The mask image does not exist!" 1
fi

if [ "_${output_basename}" = "_" ]; then
    exitprog "You didn't specify an output basename" 1
fi

if [ $use_region_atlas -eq 1 ]; then
  if [ ! -f ${region_atlas} ]; then
    exitprog "The region atlas you specified does not exist!" 1
  fi
fi

basename_mask=`basename $mask .nii`
dirname_mask=`dirname $mask`

if [ "$basename_mask" = "`basename $mask`" ]; then
    exitprog "The mask is not a Nifti file. "
fi

basename_image=`basename $image .nii`
dirname_image=`dirname $image`

if [ "$basename_image" = "`basename $image`" ]; then
    exitprog "The image is not a Nifti file. "
fi

if [ ! -d $tmpdir ]; then
    mkdir $tmpdir
    if [ $? -ne 0 ]; then
		exitprog "Error: unable to create temporary directory $tmpdir" 1
    fi
fi

message "Temp directory is $tmpdir"
thedate=`$DATE`
message "Start time is $thedate"

echo "Starting $0 with:"
echo "  image=$image"
echo "  image_basename=$basename_image"
echo "  image_dirname=$dirname_image"
echo "  mask=$mask"
echo "  mask_basename=$basename_mask"
echo "  mask_dirname=$dirname_mask"
echo "  output_basename=$output_basename"
echo "  atlas=$atlas"
echo "  use_atlas=$use_atlas"
echo "  grey_prior=$grey_prior"
echo "  use_grey=$use_grey"
echo "  white_prior=$white_prior"
echo "  use_white=$use_white"
echo "  csf_prior=$csf_prior"
echo "  use_csf=$use_csf"
echo "  deep_grey_prior=$deep_grey_prior"
echo "  use_deep_grey=$use_deep_grey"
echo "  internal_csf_prior=$internal_csf_prior"
echo "  use_internal_csf=$use_internal_csf"
echo "  set_spm_dir=$set_spm_dir"
echo "  spm_dir=$spm_dir"
echo "  tmpdir=$tmpdir"
echo "  keeptmp=$keeptmp"
echo "  use_gpu=$use_gpu"
echo "  min_classification_prob=$min_classification_prob"
echo "  laplacian_epsilon=$laplacian_epsilon"
echo "  laplacian_iters=$laplacian_iters"
echo "  pde_epsilon=$pde_epsilon"
echo "  pde_iters=$pde_iters"
echo "  levels_pyramid=$levels_pyramid"
echo "  levels_perform=$levels_perform"
echo "  region_atlas=$region_atlas"
echo "  region_numbers=$region_numbers"
echo "  dilations=$dilations"
echo "  refine_labels=$refine_labels"
echo "  resample_isotropic=$resample_isotropic"
echo "  iso_tropic=$iso_tropic"
echo "  initp=$initp"
echo "  method=$method"
echo "  voxel_multiplication=$voxel_multiplication"
echo "  use_voxel_multiplication=$use_voxel_multiplication"

#####################################################################
# Register atlas to image.
#####################################################################
execute_command_or_else_stop "cteRegisterAtlasToImage.sh ${image} ${output_basename} -mask ${mask} -dilations ${dilations} -atlas ${atlas} -keeptmp -tmpdir ${tmpdir}/reg -levels ${levels_pyramid} -levels_to_perform ${levels_perform}"

#####################################################################
# Call initial segmentation. We don't want to repeat the registration
#####################################################################
if [ $use_atlas -eq 1 ]; then
  seg_atlas_arg="-atlas $atlas"
fi
if [ $use_grey -eq 1 ]; then
  seg_grey_arg="-grey $grey_prior"
fi
if [ $use_white -eq 1 ]; then
  seg_white_arg="-white $white_prior"
fi
if [ $use_csf -eq 1 ]; then
  seg_csf_arg="-csf $csf_prior"
fi
if [ $use_deep_grey -eq 1 ]; then
  seg_deep_grey_arg="-deep_grey $deep_grey_prior"
fi
if [ $use_internal_csf -eq 1 ]; then
  seg_internal_csf_arg="-internal_csf $internal_csf_prior"
fi
if [ $set_spm_dir -eq 1 ]; then
  seg_spm_arg="-spm $spm_dir"
fi
if [ $keeptmp -eq 1 ]; then
  seg_keep_tmp_arg="-keeptmp"
fi
if [ $use_gpu -eq 1 ]; then
  seg_gpu_arg="-gpu"
fi

################################################################
# Run segmentation.
################################################################
execute_command_or_else_stop "segRelaxPriors.sh ${image} ${mask} -cpp ${output_basename}_atlas_to_native_cpp.nii -levels ${levels_pyramid} -levels_to_perform ${levels_perform} ${seg_atlas_arg} ${seg_grey_arg} ${seg_white_arg} ${seg_csf_arg} ${seg_deep_grey_arg} ${seg_internal_csf_arg} ${seg_spm_arg} ${seg_gpu_arg} -keeptmp -tmpdir ${tmpdir}/seg -dilations ${dilations} " 

################################################################
# Use atlas to mask out cerebellum. 
################################################################
execute_command_or_else_stop "cteMaskImageUsingRegions.sh ${dirname_image}/${basename_image}_GMfc.nii ${output_basename}_regions_in_native.nii ${tmpdir}/${basename_image}_GMfc_masked.nii -regions 9001,9002,9011,9012,9021,9022,9031,9032,9041,9042,9051,9052,9061,9062,9071,9072,9081,9082,9100,9110,9120,9130,9140,9150,9160,9170 -mask_value 0 -keeptmp -tmpdir ${tmpdir}/mask "
execute_command_or_else_stop "cteMaskImageUsingRegions.sh ${dirname_image}/${basename_image}_WMfc.nii ${output_basename}_regions_in_native.nii ${tmpdir}/${basename_image}_WMfc_masked.nii -regions 9001,9002,9011,9012,9021,9022,9031,9032,9041,9042,9051,9052,9061,9062,9071,9072,9081,9082,9100,9110,9120,9130,9140,9150,9160,9170 -mask_value 0 -keeptmp -tmpdir ${tmpdir}/mask "
execute_command_or_else_stop "cteMaskImageUsingRegions.sh ${dirname_image}/${basename_image}_CSFfc.nii ${output_basename}_regions_in_native.nii ${tmpdir}/${basename_image}_CSFfc_masked.nii -regions 9001,9002,9011,9012,9021,9022,9031,9032,9041,9042,9051,9052,9061,9062,9071,9072,9081,9082,9100,9110,9120,9130,9140,9150,9160,9170 -mask_value 0 -keeptmp -tmpdir ${tmpdir}/mask "
execute_command_or_else_stop "cteMaskImageUsingRegions.sh ${dirname_image}/${basename_image}_dGM.nii ${output_basename}_regions_in_native.nii ${tmpdir}/${basename_image}_dGM_masked.nii -regions 9001,9002,9011,9012,9021,9022,9031,9032,9041,9042,9051,9052,9061,9062,9071,9072,9081,9082,9100,9110,9120,9130,9140,9150,9160,9170 -mask_value 0 -keeptmp -tmpdir ${tmpdir}/mask "
execute_command_or_else_stop "cteMaskImageUsingRegions.sh ${dirname_image}/${basename_image}_iCSF.nii ${output_basename}_regions_in_native.nii ${tmpdir}/${basename_image}_iCSF_masked.nii -regions 9001,9002,9011,9012,9021,9022,9031,9032,9041,9042,9051,9052,9061,9062,9071,9072,9081,9082,9100,9110,9120,9130,9140,9150,9160,9170 -mask_value 0 -keeptmp -tmpdir ${tmpdir}/mask "
 
################################################################
# Optionally resample to iso-tropic voxels.
################################################################
if [ $resample_isotropic -eq 1 ]; then

	execute_command_or_else_stop "niftkTransformation -ti ${tmpdir}/${basename_image}_GMfc_masked.nii -o ${tmpdir}/${basename_image}_GMfc.nii -identity -j 2 -iso ${iso_tropic}"
	execute_command_or_else_stop "niftkTransformation -ti ${tmpdir}/${basename_image}_WMfc_masked.nii -o ${tmpdir}/${basename_image}_WMfc.nii -identity -j 2 -iso ${iso_tropic}"
	execute_command_or_else_stop "niftkTransformation -ti ${tmpdir}/${basename_image}_CSFfc_masked.nii -o ${tmpdir}/${basename_image}_CSFfc.nii -identity -j 2 -iso ${iso_tropic}"
	execute_command_or_else_stop "niftkTransformation -ti ${tmpdir}/${basename_image}_dGM_masked.nii -o ${tmpdir}/${basename_image}_dGM.nii -identity -j 2 -iso ${iso_tropic}"
	execute_command_or_else_stop "niftkTransformation -ti ${tmpdir}/${basename_image}_iCSF_masked.nii -o ${tmpdir}/${basename_image}_iCSF.nii -identity -j 2 -iso ${iso_tropic}"				

    execute_command_or_else_stop "cp ${image} ${tmpdir}/original.nii"
    execute_command_or_else_stop "niftkTransformation -ti ${dirname_image}/${basename_image}_iCSF.nii -si ${tmpdir}/original.nii -o ${tmpdir}/target.nii -identity -j 2 -iso ${iso_tropic}"

else
	execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_GMfc_masked.nii ${tmpdir}/${basename_image}_GMfc.nii"
	execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_WMfc_masked.nii ${tmpdir}/${basename_image}_WMfc.nii"
	execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_CSFfc_masked.nii ${tmpdir}/${basename_image}_CSFfc.nii"
	execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_dGM_masked.nii ${tmpdir}/${basename_image}_dGM.nii"
	execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_iCSF_masked.nii ${tmpdir}/${basename_image}_iCSF.nii"
	execute_command_or_else_stop "cp ${image} ${tmpdir}/target.nii"
fi

###########################################################################
# Jorge's segmentation outputs its own thickness images. So lets move them.
###########################################################################

execute_command_or_else_stop "mv ${dirname_image}/${basename_image}_thickness_masked.nii ${tmpdir}/"
execute_command_or_else_stop "mv ${dirname_image}/${basename_image}_thickness.nii ${tmpdir}/"

################################################################
# Create a Label image
################################################################
if [ $do_connected_components -eq 1 ]; then
  connected_arg=" -connected "
fi

execute_command_or_else_stop "niftkCTEPrepareVolumes -g ${tmpdir}/${basename_image}_GMfc.nii -w ${tmpdir}/${basename_image}_WMfc.nii -c ${tmpdir}/${basename_image}_CSFfc.nii -dGM ${tmpdir}/${basename_image}_dGM.nii -iCSF ${tmpdir}/${basename_image}_iCSF.nii -pg ${min_classification_prob} -wl 1 -gl 2 -cl 3 ${connected_arg} -o ${tmpdir}/label.nii -clampGM ${tmpdir}/${basename_image}_GMfc_clamped.nii "

################################################################
# Optionally do Chloe Hutton's layering approach to split sulci.
################################################################

if [ $refine_labels -eq 1 ]; then
	execute_command_or_else_stop "mv ${tmpdir}/label.nii  ${tmpdir}/label_original.nii"
	execute_command_or_else_stop "cteRefineLabelImage.sh ${tmpdir}/label_original.nii ${tmpdir}/label.nii -white 1 -grey 2 -csf 3  -keeptmp -tmpdir $tmpdir/refine "
fi
 
################################################################
# Now do cortical thickness estimation. All that is in C++.
################################################################

if [ $use_voxel_multiplication -eq 1 ]; then
    execute_command_or_else_stop "niftkCTEHighRes -i ${tmpdir}/label.nii -gmpv ${tmpdir}/${basename_image}_GMfc_clamped.nii -o ${tmpdir}/thickness.nii -w 1 -g 2 -c 3 -le ${laplacian_epsilon} -li ${laplacian_iters} -pe ${pde_epsilon} -pi ${pde_iters} -lapl ${tmpdir}/laplacian.nii -t ${initp} -AcostaCorrection -vmf ${voxel_multiplication} " 
else
    execute_command_or_else_stop "niftkCTEBourgeat2008 -i ${tmpdir}/label.nii -gmpv ${tmpdir}/${basename_image}_GMfc_clamped.nii -o ${tmpdir}/thickness.nii -w 1 -g 2 -c 3 -le ${laplacian_epsilon} -li ${laplacian_iters} -pe ${pde_epsilon} -pi ${pde_iters} -lapl ${tmpdir}/laplacian.nii -t ${initp} -method ${method} "
fi

################################################################
# Now do smoothing of the result.
################################################################

execute_command_or_else_stop "niftkCTEAcosta2009Smoothing -i ${tmpdir}/thickness.nii -l ${tmpdir}/label.nii -o  ${tmpdir}/smoothed_thickness.nii -w 1 -g 2 "

################################################################
# Now, downsample results, so that the thickness image comes out
# the same size as the original images.
################################################################

if [ $resample_isotropic -eq 1 ]; then

	execute_command_or_else_stop "niftkTransformation -ti ${image} -si ${tmpdir}/thickness.nii -o ${tmpdir}/thickness_resampled.nii -identity -j 1 "
	execute_command_or_else_stop "niftkTransformation -ti ${image} -si ${tmpdir}/smoothed_thickness.nii -o ${tmpdir}/smoothed_thickness_resampled.nii -identity -j 1 "
	execute_command_or_else_stop "mv ${tmpdir}/thickness_resampled.nii ${output_basename}_thickness.nii"
	execute_command_or_else_stop "mv ${tmpdir}/smoothed_thickness_resampled.nii ${output_basename}_smoothed_thickness.nii"	
else
	execute_command_or_else_stop "mv ${tmpdir}/thickness.nii ${output_basename}_thickness.nii"
	execute_command_or_else_stop "mv ${tmpdir}/smoothed_thickness.nii ${output_basename}_smoothed_thickness.nii"
fi

################################################################################
# Now run stats. Registration done above.
################################################################################
if [ $use_region_numbers -eq 1 ]; then
	regions_arg=" -regions $region_numbers "
fi

execute_command_or_else_stop "cteExtractStatsUsingAtlas.sh ${output_basename}_thickness.nii ${output_basename}_regions_in_native.nii ${output_basename} ${regions_arg} "

################################################################
# Tidy up a few files
################################################################

execute_command_or_else_stop "mv ${tmpdir}/label.nii ${output_basename}_label.nii"
execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_GMfc.nii ${output_basename}_GMfc.nii"
execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_WMfc.nii ${output_basename}_WMfc.nii"
execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_CSFfc.nii ${output_basename}_CSFfc.nii"
execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_dGM.nii ${output_basename}_dGM.nii"
execute_command_or_else_stop "mv ${tmpdir}/${basename_image}_iCSF.nii ${output_basename}_iCSF.nii"

################################################################
message "Cleanup"
################################################################

thedate=`$DATE`
message "Time is $thedate"

if [ $keeptmp -eq 0 ]; then
    message "Removing temp dir $tmpdir"
    execute_command "rm -rf $tmpdir"
else
    message "Keeping temp dir $tmpdir"
fi

thedate=`$DATE`
message "End time is $thedate"
message "Finished"
