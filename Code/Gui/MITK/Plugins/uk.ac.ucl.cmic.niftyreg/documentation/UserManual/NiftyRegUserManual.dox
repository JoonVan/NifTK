/**
\page uk.ac.ucl.cmic.niftyreg The NiftyReg Registration View

\image html NiftyRegLogo.png "The Icon for NiftyReg"

\section NiftyRegIntroduction Introduction

The NiftyReg plugin to NiftyView allows the user to perform rigid,
affine and non-linear registrations of 3D images. It is selected via
the logo shown above or by selecting 'Window', 'Show View',
'NiftyRegistration' from the menu bar.

The rigid and affine registration are performed using an algorithm
presented by Ourselin et al.[1, 2]; whereas the non-rigid registration
is based on the work of Modat et al.[3]. If you are planning to use
any of our research, we would be grateful if you would be kind enough
to cite reference(s) [1], [2] (rigid or affine) and/or [3]
(non-rigid).


\section NiftyRegQuickStart Quick Start

When the NiftyReg plugin is first opened, the 'Quick Start' tab is
displayed by default (Figure 1). This contains the minimum set of information
that must be entered to run a registration, specifically:
 
\image html NiftyReg_QuickStartDialog.png "Figure 1. The 'Quick Start' NiftyReg plugin dialog contains the minimum set of information that must be entered to run a registration."

<ul>
<li> <b>source image</b> This is the 'moving' or 'floating' image which
will be registered to, and hence transformed into the space of, the
'target' image. The drop down menu enables any of the images currently
loaded into the 'Data Manager' to be selected.</li>

<li> <b>target image</b> This is the 'fixed' or 'reference' image to
which the 'source' image is registered and again the drop down menu
enables any of the images currently loaded into the 'Data Manager' to
be selected.</li>

<li> The radio buttons below the source and target image menus
determine whether the registration will be:</li>

<ul>
<li><b>Rigid or affine only</b> in which a non-rigid registration is
not performed (NB. the default behaviour in this case is to perform an initial
rigid registration followed by an affine registration).</li>

<li><b>Non-rigid only</b> in which the non-rigid registration isn't
initialised by an affine registration but is computed directly from the
input images.</li>

<li><b>Rigid or affine followed by non-rigid.</b> This is the default
behaviour which uses the initial rigid or affine registration to
eliminate the global displacement between the images and the non-rigid
registration to subsequently bring local regions of the images into alignment.</li>
</ul> 

</ul> 

At the bottom of the NiftyReg plugin window is a progress bar which
gives an indication of how long the registration will take to complete
and five buttons. The buttons have the following functions: 

<ul>
<li><b>Execute</b> This button starts the registration</li>

<li><b>Default Params</b> This button restores the registration
parameters to their default values.</li>

<li><b>Save Transformation</b> When a registration has been completed
this button enables the affine and/or non-rigid transformations to be
written to files.</li>

<li><b>Save Registration Parameters</b> This button enables the
registration parameters to be saved to a file which can then be
reloaded at a later date using the 'Load Registration Parameters'
button. The file format used is a shell script that could be executed
on a Linux or MacOS command line or, after slight modification, via
the DOS command line on Windows.</li>

<li><b>Load Registration Parameters</b> This button enables the
parameters saved via the 'Save Registration Parameters' button to be
reloaded into the plugin.</li>
</ul> 


\section NiftyRegCommon Common

This tab contains the parameters that are common to both the
rigid/affine and non-rigid registrations (Figure 2).

\image html NiftyReg_CommonDialog.png "Figure 2. The 'Common' tab contains the parameters that are common to both the rigid/affine and non-rigid registrations."

These parameters are:

\subsection NiftyRegCommonMasking Masking

A mask is commonly used to eliminate regions of the
'target' image that do not appear in the 'source' image, such as a
tumour or the scanner couch. Even though these regions aren't used in
the registration the 'source' image will be transformed such that every
voxel in the 'target' image space is included when the transformed image
is calculated.

<ul>
<li><b>target mask image</b> The mask image which contains
non-zero voxels in regions of the target image which will be used in
the registration.  </li>
</ul> 

\subsection NiftyRegCommonMultiScale Multi-Scale Options

Performing a registration at multiple scales ensures that coarse or large scale features are aligned first with progressively finer structures being registered during later iterations of the algorithms. This approach should ensure that the registration optimisation does not become caught in local minima. It may also make the registration faster by reducing the amount data used in the earlier iterations.

<ul>
<li><b>number of levels</b> This is the number of levels used to
create the 'source' and 'target' image pyramids. The base of the each
pyramid comprises the corresponding input image at it's original
resolution. The second level comprises the image resampled to
half its resolution (ie. half the number of voxels along each
axis). At the third level the resolution is halved again and so on
for the number of levels specified using this spin box. The default
number of levels is three. In addition to downsampling the images, the control point grid will also be changed by a factor of two at each level. (See also the 'use pyramidal approach' option below to turn on or off the image down-sampling).</li>

<li><b>levels to use</b> This is the number of levels in the 'source'
and 'target' image pyramids that will actually be used in the
registration. This number must be less than or equal to the 'number of
levels' specified above. In general all the levels in the image
pyramids are most commonly used, that is, the registration is first
performed at the coarsest resolution (the top of the pyramid) and
subsequently refined by using images at progressively finer
resolutions (lower down the pyramid). Specifying fewer than the maximum
number of levels in the pyramid will therefore result in a coarser but faster registration.</li>
</ul> 

\subsection NiftyRegCommonBlurring Input Image Blurring (sigma mm)

These spin
boxes allow the user to blur the input images prior to running the
registration. Blurring can be used to reduce the likelihood of the registration erroneously aligning fine structure in the images which does not correspond anatomically.

<ul> 
<li><b>source image</b> and <b>target image</b> </li>  The width (standard deviation) of the Gaussian kernel used to perform the smoothing in millimeters. If zero is specified (the default) then no smoothing will be performed.
<li><b>None</b> </li>Reset both values to zero and therefore turn off input image blurring.
</ul>

\subsection NiftyRegCommonInitialAffineTransformation Affine Transformation

A previously computed affine transformation can be used to initialise the registration by bringing the images into approximate alignment prior to executing the registration. The check box enables this transformation to be switched on (assuming a file has been selected) or off.

<ul>
<li><b>is FLIRT</b> The affine transformation is in Oxford University's FLIRT (FMRIB's Linear Image Registration Tool) format. </li>
<li><b>filename</b> The name of the transformation file. This can be typed directly into the input dialog or the browse button can be used to bring up a file browser dialog.</li>
</ul> 


\section NiftyRegRigidAffine Rigid/Affine

Ourselin et al.[1, 2] presented an algorithm called Aladin, which is based on
a block-matching approach and a Trimmed Least Square (TLS) scheme. Firstly,
the block matching provides a set of corresponding points between a 'target' and
a 'source' image. Secondly, using this set of corresponding points, the best
rigid or affine transformation is evaluated. This two-step loop is repeated
until convergence to the best transformation.

In the implementation employed here, normalised cross-correlation is
calculated between the target and source blocks to extract the best
correspondence. The block width is constant and has been set to 4
voxels. A coarse-to-fine approach is used, where the registration is
first performed on down-sampled images (using a Gaussian filter to
resample images) and finally performed on full resolution images. 

This tab (Figure 3) enables the user to modify the rigid or affine registration parameters.

\image html NiftyReg_RigidAffineDialog.png "Figure 3. The rigid/affine registration parameters."

\subsection NiftyRegRigidAffineInitialisation Initialisation

<ul>
<li><b>use nifti header to initialise translation</b> The nifti image
format contains two affine transformation matrices (the 'q form' or 's
form' matrices), one or other of which can be used to translate the
image prior to registration. This behaviour (which is also the
default) can be used to bring the images into appropoximate alignment
by ensuring that the image axes and origins are approximately
aligned. The nifti format is the native image format used by both the
affine and non-rigid registrations. The 'source' and 'target' images
are automatically converted into this format when the registration is
executed and the header matrices are set according to the image
position and orientation data of the corresponding images in the 'Data
Manager'. 
</ul> 


\subsection NiftyRegRigidAffineMethod Method

<ul> 

<li><b>rigid only</b>, <b>rigid then affine</b> and <b>direct
affine</b> These radio buttons can be used to specify whether a
rigid (translation and rotation only) or a fully affine (also
incoporating scale and shear) transformation is computed. The default
behaviour is to compute a rigid transformation first and follow this
with calculation of the affine parameters. This approach constrains the
registration initially to try and limit any scale and shear distortion
which is assumed to be less probable than translation and rotation.</li> 

<li><b>use symmetric algorithm</b> In a symmetric registration
block matching is performed in both the forward ('target'
image blocks matched in the 'source' image) and backward ('source'
image blocks matched in the 'target' image) directions. The affine
matrices are then averaged and this average is used to initialise the
next iteration of the algorithm. This appears to give more robust
results. The symmetric registration option is selected by default.</li> 

<li><b>max number of iterations</b> This parameter specifies the
number of rigid or affine (or both) iterations to perform. After each
iteration the 'source' image is transformed with the current estimate
of the transformation which should ensure that, as the registration
becomes more accurate, the next block matching iteration will achieve
a better match between features in the two images. The default number of
iterations to perform is five.</li>

<li><b>percent of blocks to use</b> At the start of the rigid/affine
registration the target image is divided into blocks of size four
voxels in each dimension. This determines the total number of blocks
that could be used in the registration. For each of these blocks the
variance of the underlying voxel intensities is computed and a sorted
list of these block variances is created. Blocks with a high variance
will correspond to corners or edges in the images which can be
localised more accurately than flat image blocks with low
variance. This parameter therefore enables the user to specify that
only a certain percentage of blocks with the highest variances will be
used in the registration. The default value of this paramater
specifies that 50% of the blocks will be used.</li>

<li><b>percent of inliers to use</b> Once the number of blocks to use
in the registration has been established by the above calculation, the
best match for each of these 'target' image blocks in the 'source'
image is calculated by cross-correlation. A least-squares fit of a
rigid or affine transformation to the resulting set of paired
correspondences is then computed. A proportion of these matches are
assumed to be erroneous or inaccurate, i.e. outliers, as defined by
their least squared error following the fit. Therefore only the
percentage of 'inliers' defined by this parameter are used to
recompute the rigid or affine transformation which is used in the next
iteration of the algorithm. The default value of this parameter is
50%.</li>

</ul>


\subsection NiftyRegRigidAffineAdvanced Advanced

<ul> 
<li><b>internal interpolation:</b> <b>nearest</b>, <b>linear</b> or <b>cubic</b> This parameter determines the interpolation scheme used to transform the 'source' image at each iteration of the registration. A cubic interpolation should be the most accurate but it is also the most computationally intensive. Conversely a nearest neighbour interpolation is quick to compute but generally produces a poor result. The default, linear interpolation is therefore usually a good compromise between computation time and the accuracy of the transformed image. </li>
</ul> 


\section NiftyRegNonRigid Non-Rigid Registration

The non-rigid algorithm implementation is based on the Free-From Deformation
presented by Rueckert et al.[4]. However, the algorithm has been re-factored
in order to speed-up registration. The deformation of the source image is
performed using cubic B-splines to generate the deformation field. Specifically,
a lattice of equally spaced control points is defined over the target image
and moving each point allows the mapping to the source image to be modified.
In order to assess the quality of the warping between both input images, an
objective function composed from the Normalised Mutual Information (NMI) and
the Bending-Energy (BE) is used. The objective function value is optimised
using the analytical derivative of both the NMI and the BE within a conjugate
gradient scheme.

\image html NiftyReg_NonRigidDialog.png "Figure 4. The Non-Rigid registration parameters."


\subsection NiftyRegNonRigidInitialisation Initial Control Point Grid

<ul>

<li><b>use control point grid</b>, <b>browse</b>, <b>filename</b> The
registration can be initialised using a control point grid stored in
the file specified by these options. This can be used to refine a
previous registration. The control point grid can be written to a file
using the 'Save Transformation' button at the bottom of the window. If
the 'use control point grid' check box is unchecked then a previously
loaded grid can be removed from the initialisation of a subsequent
registration.

</ul>

\subsection NiftyRegNonRigidInputImage Input Images

<ul>
<li> <b>upper/lower threshold for target/source image</b>
The similarity metric between the 'target' and transformed 'source'
images, which is optimised during the registration, is computed using
a 2D histogram. Specifying the following thresholds will increase the
influence of a specific range of intensities by spreading their values
over a greater number of bins. This might be desirable if much of the
useful information in the image(s) occupies a limited range and there
are a small number of high or low intensity outliers. The default
behaviour is to use the full range of intensities.</li>
</ul>

\subsection NiftyRegNonRigidSpline Spline

<ul>
<li> <b>control point spacing (mm or voxels if negative): x, y and z</b>
This option specifies the control point spacing for the free-form
(b-spline) deformation. A finer control point spacing enables a more
complex deformation to be captured, whereas a large control point
spacing will produce a smoother deformation. Choosing an appropriate
control point spcing is key to ensuring that a representative
deformation is computed.</li>
</ul>


\section NiftyRegNonRigidAdvanced Advanced Non-Rigid Registration

The following parameters are considered advanced and hence would not
normally be altered by the user.

\image html NiftyReg_AdvancedNonRigidDialog.png "Figure 5.  The advanced Non-Rigid registration parameters."

\subsection NiftyRegNonRigidAdvancedObjectiveFunction Objective Function

<ul>
<li> <b>number of source histogram bins</b> and <b>number of target histogram bins</b></li>
The number of histogram bins determines the intensity resolution of
the 2D histogram used to compute the image similarity metric. The
number of bins should be chosen such that any given bin will capture
the intensities of corresponding 'target' and 'source' image tissue
classes. Typical values are 32, 64 or 128. The default value is 64.
<li> <b>weight of the bending energy</b> Specifying a non-zero bending energy, incorporates this constraint into the optimised cost function (with the similarity metric) and smooths the deformation field. The bending energy is the sum of the second derivatives of the transformation. A similar (more computationally efficient) approach is to reduce the control point spacing since the b-spline deformation is, by definition, smoothly continuous.</li>
<li> <b>weight of log of the jacobian determinant</b> Specifying a non-zero log of the jacobian weight introduces a global volume preserving constraint which can be useful if the volume of the object being registered is known to be (at least approximately) conserved.</li>
<li> <b>linear energy weights</b></li>The linear energy (or elasticity) weights are an alternative form of regularisation (to the bending energy) which will also penalise scaling of the deformation. The first term is the weight for the square of the symmetric part of the Jacobian matrix and the second term is the weight to apply to the divergence.
</ul>

<ul>
<li> <b>approximate jacobian log only at control points</b> The default operation of the algorithm is to approximate the log of the jacobian only at the control points reducing computation time.</li>
</ul>

<ul>
<li> <b>similarity measure</b> These radio buttons are used to select between normalised mutual information (NMI - the default), sum of squared differences (SSD) and Kullback-Leibler divergence (KL div). Kullback-Leibler divergence should be used when registering probabilities but is similiar to SSD (when registering probabilities).</li>             
</ul>


\subsection NiftyRegNonRigidAdvancedOptimisation Optimisation

<ul>
<li> <b>use gradient ascent instead of conjugate gradient</b> This parameter specifies the optimisation scheme to use (conjugate gradient is the default).</li>
<li> <b>max number of iterations</b> This is the maximum number of iterations to perform at each level of the registration and defaults to 100.</li>
<li> <b>use pyramidal approach</b> The multi-scale image pyramid method can be turned off by unchecking this box. This might be appropriate if the images are already of quite a coarse resolution.</li>
</ul>

\subsection NiftyRegNonRigidAdvanced Advanced

<ul>
<li> <b>smoothing for the metric derivative (sigma mm)</b> The metric derivative can be smoothed at a specific resolution in mm (the default is no smoothing).</li>
<li> <b>padding value</b> If a 'padding' value is specified then voxels which are transformed from outside of the undeformed image will be assigned this intensity.</li>
<li><b>internal interpolation:</b> <b>nearest</b>, <b>linear</b> or <b>cubic</b> This parameter determines the interpolation scheme used to transform the 'source' image at each iteration of the registration. A cubic interpolation should be the most accurate but it is also the most computationally intensive. Conversely a nearest neighbour interpolation is quick to compute but generally produces a poor result. The default, linear interpolation, is therefore usually a good compromise between computation time and the accuracy of the transformed image. </li>
</ul>

\section NiftyRegReferences References

[1] Sebastien Ourselin, A Roche, G Subsol, Xavier Pennec, and Nicholas Ayache. Reconstructing a 3d structure from serial histological sections. Image and Vision Computing, 19(1-2):25–31, 2001. 

[2] Sebastien Ourselin, Radu Stefanescu and Xavier Pennec. Robust registration of multi-modal images: Towards real-time clinical applications, MICCAI 2002.

[3] Marc Modat, Gerard G Ridgway, Zeike A Taylor, Manja Lehmann, Josephine Barnes, Nick C Fox, David J Hawkes, and Sebastien Ourselin. Fast free-form deformation using graphics processing units. Comput Meth Prog Bio, accepted. 

[4] D. Rueckert, L.I. Sonoda, C. Hayes, D.L.G. Hill, M.O. Leach, and D.J. Hawkes. Nonrigid Registration Using Free-Form Deformations: Application to Breast MR Images. IEEE Trans. Med. Imag., 18:712–721, 1999.

*/
